module.exports = [
"[project]/node_modules/ol/renderer/Map.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/Map
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Disposable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/Disposable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$coordinate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/coordinate.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/functions.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$layer$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/layer/Layer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$IconImageCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/IconImageCache.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/util.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
/**
 * @template T
 * @typedef HitMatch
 * @property {import("../Feature.js").FeatureLike} feature Feature.
 * @property {import("../layer/Layer.js").default} layer Layer.
 * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
 * @property {number} distanceSq Squared distance.
 * @property {import("./vector.js").FeatureCallback<T>} callback Callback.
 */ /**
 * @abstract
 */ class MapRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Disposable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {import("../Map.js").default} map Map.
   */ constructor(map){
        super();
        /**
     * @private
     * @type {import("../Map.js").default}
     */ this.map_ = map;
    }
    /**
   * @abstract
   * @param {import("../render/EventType.js").default} type Event type.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ dispatchRenderEvent(type, frameState) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["abstract"])();
    }
    /**
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @protected
   */ calculateMatrices2D(frameState) {
        const viewState = frameState.viewState;
        const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
        const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["makeInverse"])(pixelToCoordinateTransform, coordinateToPixelTransform);
    }
    /**
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {boolean} checkWrapped Check for wrapped geometries.
   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {S} thisArg Value to use as `this` when executing `callback`.
   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
   *     function, only layers which are visible and for which this function
   *     returns `true` will be tested for features.  By default, all visible
   *     layers will be tested.
   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
   * @return {T|undefined} Callback result.
   * @template S,T,U
   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
        let result;
        const viewState = frameState.viewState;
        /**
     * @param {boolean} managed Managed layer.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @return {T|undefined} Callback result.
     */ function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {
            return callback.call(thisArg, feature, managed ? layer : null, geometry);
        }
        const projection = viewState.projection;
        const translatedCoordinate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$coordinate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["wrapX"])(coordinate.slice(), projection);
        const offsets = [
            [
                0,
                0
            ]
        ];
        if (projection.canWrapX() && checkWrapped) {
            const projectionExtent = projection.getExtent();
            const worldWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(projectionExtent);
            offsets.push([
                -worldWidth,
                0
            ], [
                worldWidth,
                0
            ]);
        }
        const layerStates = frameState.layerStatesArray;
        const numLayers = layerStates.length;
        const matches = [];
        const tmpCoord = [];
        for(let i = 0; i < offsets.length; i++){
            for(let j = numLayers - 1; j >= 0; --j){
                const layerState = layerStates[j];
                const layer = layerState.layer;
                if (layer.hasRenderer() && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$layer$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inView"])(layerState, viewState) && layerFilter.call(thisArg2, layer)) {
                    const layerRenderer = layer.getRenderer();
                    const source = layer.getSource();
                    if (layerRenderer && source) {
                        const coordinates = source.getWrapX() ? translatedCoordinate : coordinate;
                        const callback = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                        tmpCoord[0] = coordinates[0] + offsets[i][0];
                        tmpCoord[1] = coordinates[1] + offsets[i][1];
                        result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback, matches);
                    }
                    if (result) {
                        return result;
                    }
                }
            }
        }
        if (matches.length === 0) {
            return undefined;
        }
        const order = 1 / matches.length;
        matches.forEach((m, i)=>m.distanceSq += i * order);
        matches.sort((a, b)=>a.distanceSq - b.distanceSq);
        matches.some((m)=>{
            return result = m.callback(m.feature, m.layer, m.geometry);
        });
        return result;
    }
    /**
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {boolean} checkWrapped Check for wrapped geometries.
   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
   *     function, only layers which are visible and for which this function
   *     returns `true` will be tested for features.  By default, all visible
   *     layers will be tested.
   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
   * @return {boolean} Is there a feature at the given coordinate?
   * @template U
   */ hasFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
        const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TRUE"], this, layerFilter, thisArg);
        return hasFeature !== undefined;
    }
    /**
   * @return {import("../Map.js").default} Map.
   */ getMap() {
        return this.map_;
    }
    /**
   * Render.
   * @abstract
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */ renderFrame(frameState) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["abstract"])();
    }
    /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @protected
   */ scheduleExpireIconCache(frameState) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$IconImageCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["shared"].canExpireCache()) {
            frameState.postRenderFunctions.push(expireIconCache);
        }
    }
}
/**
 * @param {import("../Map.js").default} map Map.
 * @param {import("../Map.js").FrameState} frameState Frame state.
 */ function expireIconCache(map, frameState) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$IconImageCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["shared"].expire();
}
const __TURBOPACK__default__export__ = MapRenderer;
}),
"[project]/node_modules/ol/renderer/Composite.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/Composite
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ObjectEventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/ObjectEventType.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/css.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/events.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$layer$2f$BaseVector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/layer/BaseVector.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$layer$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/layer/Layer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$Event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/Event.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/EventType.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$Map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/renderer/Map.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
/**
 * @classdesc
 * Canvas map renderer.
 * @api
 */ class CompositeMapRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$Map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {import("../Map.js").default} map Map.
   */ constructor(map){
        super(map);
        /**
     * @private
     * @type {import("../events.js").EventsKey}
     */ this.fontChangeListenerKey_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["listen"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkedFonts"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ObjectEventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].PROPERTYCHANGE, map.redrawText, map);
        /**
     * @private
     * @type {HTMLDivElement}
     */ this.element_ = document.createElement('div');
        const style = this.element_.style;
        style.position = 'absolute';
        style.width = '100%';
        style.height = '100%';
        style.zIndex = '0';
        this.element_.className = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CLASS_UNSELECTABLE"] + ' ol-layers';
        const container = map.getViewport();
        container.insertBefore(this.element_, container.firstChild || null);
        /**
     * @private
     * @type {Array<HTMLElement>}
     */ this.children_ = [];
        /**
     * @private
     * @type {boolean}
     */ this.renderedVisible_ = true;
    }
    /**
   * @param {import("../render/EventType.js").default} type Event type.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @override
   */ dispatchRenderEvent(type, frameState) {
        const map = this.getMap();
        if (map.hasListener(type)) {
            const event = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$Event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](type, undefined, frameState);
            map.dispatchEvent(event);
        }
    }
    /**
   * @override
   */ disposeInternal() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unlistenByKey"])(this.fontChangeListenerKey_);
        this.element_.remove();
        super.disposeInternal();
    }
    /**
   * Render.
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   * @override
   */ renderFrame(frameState) {
        if (!frameState) {
            if (this.renderedVisible_) {
                this.element_.style.display = 'none';
                this.renderedVisible_ = false;
            }
            return;
        }
        this.calculateMatrices2D(frameState);
        this.dispatchRenderEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].PRECOMPOSE, frameState);
        const layerStatesArray = frameState.layerStatesArray.sort((a, b)=>a.zIndex - b.zIndex);
        const declutter = layerStatesArray.some((layerState)=>layerState.layer instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$layer$2f$BaseVector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] && layerState.layer.getDeclutter());
        if (declutter) {
            // Some layers need decluttering, turn on deferred rendering hint
            frameState.declutter = {};
        }
        const viewState = frameState.viewState;
        this.children_.length = 0;
        const renderedLayerStates = [];
        let previousElement = null;
        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){
            const layerState = layerStatesArray[i];
            frameState.layerIndex = i;
            const layer = layerState.layer;
            const sourceState = layer.getSourceState();
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$layer$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inView"])(layerState, viewState) || sourceState != 'ready' && sourceState != 'undefined') {
                layer.unrender();
                continue;
            }
            const element = layer.render(frameState, previousElement);
            if (!element) {
                continue;
            }
            if (element !== previousElement) {
                this.children_.push(element);
                previousElement = element;
            }
            renderedLayerStates.push(layerState);
        }
        this.declutter(frameState, renderedLayerStates);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["replaceChildren"])(this.element_, this.children_);
        this.dispatchRenderEvent(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].POSTCOMPOSE, frameState);
        if (!this.renderedVisible_) {
            this.element_.style.display = '';
            this.renderedVisible_ = true;
        }
        this.scheduleExpireIconCache(frameState);
    }
    /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {Array<import('../layer/Layer.js').State>} layerStates Layers.
   */ declutter(frameState, layerStates) {
        if (!frameState.declutter) {
            return;
        }
        for(let i = layerStates.length - 1; i >= 0; --i){
            const layerState = layerStates[i];
            const layer = layerState.layer;
            if (layer.getDeclutter()) {
                layer.renderDeclutter(frameState, layerState);
            }
        }
        layerStates.forEach((layerState)=>layerState.layer.renderDeferred(frameState));
    }
}
const __TURBOPACK__default__export__ = CompositeMapRenderer;
}),
"[project]/node_modules/ol/renderer/Layer.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/Layer
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/ImageState.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Observable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/Observable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/events/EventType.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/util.js [app-ssr] (ecmascript)");
;
;
;
;
const maxStaleKeys = 5;
/**
 * @template {import("../layer/Layer.js").default} LayerType
 */ class LayerRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Observable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {LayerType} layer Layer.
   */ constructor(layer){
        super();
        /**
     * The renderer is initialized and ready to render.
     * @type {boolean}
     */ this.ready = true;
        /** @private */ this.boundHandleImageChange_ = this.handleImageChange_.bind(this);
        /**
     * @private
     * @type {LayerType}
     */ this.layer_ = layer;
        /**
     * @type {Array<string>}
     * @private
     */ this.staleKeys_ = new Array();
        /**
     * @type {number}
     * @protected
     */ this.maxStaleKeys = maxStaleKeys;
    }
    /**
   * @return {Array<string>} Get the list of stale keys.
   */ getStaleKeys() {
        return this.staleKeys_;
    }
    /**
   * @param {string} key The new stale key.
   */ prependStaleKey(key) {
        this.staleKeys_.unshift(key);
        if (this.staleKeys_.length > this.maxStaleKeys) {
            this.staleKeys_.length = this.maxStaleKeys;
        }
    }
    /**
   * Asynchronous layer level hit detection.
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
   * an array of features.
   */ getFeatures(pixel) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["abstract"])();
    }
    /**
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   */ getData(pixel) {
        return null;
    }
    /**
   * Determine whether render should be called.
   * @abstract
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */ prepareFrame(frameState) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["abstract"])();
    }
    /**
   * Render the layer.
   * @abstract
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement|null} target Target that may be used to render content to.
   * @return {HTMLElement} The rendered element.
   */ renderFrame(frameState, target) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["abstract"])();
    }
    /**
   * @abstract
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
   * @return {T|undefined} Callback result.
   * @template T
   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {
        return undefined;
    }
    /**
   * @return {LayerType} Layer.
   */ getLayer() {
        return this.layer_;
    }
    /**
   * Perform action necessary to get the layer rendered after new fonts have loaded
   * @abstract
   */ handleFontsChanged() {}
    /**
   * Handle changes in image state.
   * @param {import("../events/Event.js").default} event Image change event.
   * @private
   */ handleImageChange_(event) {
        const image = event.target;
        if (image.getState() === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED || image.getState() === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].ERROR) {
            this.renderIfReadyAndVisible();
        }
    }
    /**
   * Load the image if not already loaded, and register the image change
   * listener if needed.
   * @param {import("../Image.js").default} image Image.
   * @return {boolean} `true` if the image is already loaded, `false` otherwise.
   * @protected
   */ loadImage(image) {
        let imageState = image.getState();
        if (imageState != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED && imageState != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].ERROR) {
            image.addEventListener(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CHANGE, this.boundHandleImageChange_);
        }
        if (imageState == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].IDLE) {
            image.load();
            imageState = image.getState();
        }
        return imageState == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED;
    }
    /**
   * @protected
   */ renderIfReadyAndVisible() {
        const layer = this.getLayer();
        if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {
            layer.changed();
        }
    }
    /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ renderDeferred(frameState) {}
    /**
   * Clean up.
   * @override
   */ disposeInternal() {
        delete this.layer_;
        super.disposeInternal();
    }
}
const __TURBOPACK__default__export__ = LayerRenderer;
}),
"[project]/node_modules/ol/renderer/canvas/Layer.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/canvas/Layer
 */ __turbopack_context__.s([
    "canvasPool",
    ()=>canvasPool,
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$Event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/Event.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/EventType.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ZIndexContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/ZIndexContext.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/renderer/Layer.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
const canvasPool = [];
/**
 * @type {CanvasRenderingContext2D}
 */ let pixelContext = null;
function createPixelContext() {
    pixelContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])(1, 1, undefined, {
        willReadFrequently: true
    });
}
/**
 * @abstract
 * @template {import("../../layer/Layer.js").default} LayerType
 * @extends {LayerRenderer<LayerType>}
 */ class CanvasLayerRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {LayerType} layer Layer.
   */ constructor(layer){
        super(layer);
        /**
     * @protected
     * @type {HTMLElement}
     */ this.container = null;
        /**
     * @protected
     * @type {number}
     */ this.renderedResolution;
        /**
     * A temporary transform.  The values in this transform should only be used in a
     * function that sets the values.
     * @protected
     * @type {import("../../transform.js").Transform}
     */ this.tempTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
        /**
     * The transform for rendered pixels to viewport CSS pixels.  This transform must
     * be set when rendering a frame and may be used by other functions after rendering.
     * @protected
     * @type {import("../../transform.js").Transform}
     */ this.pixelTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
        /**
     * The transform for viewport CSS pixels to rendered pixels.  This transform must
     * be set when rendering a frame and may be used by other functions after rendering.
     * @protected
     * @type {import("../../transform.js").Transform}
     */ this.inversePixelTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
        /**
     * @type {CanvasRenderingContext2D}
     */ this.context = null;
        /**
     * @private
     * @type {ZIndexContext}
     */ this.deferredContext_ = null;
        /**
     * @type {boolean}
     */ this.containerReused = false;
        /**
     * @protected
     * @type {import("../../Map.js").FrameState|null}
     */ this.frameState = null;
    }
    /**
   * @param {import('../../DataTile.js').ImageLike} image Image.
   * @param {number} col The column index.
   * @param {number} row The row index.
   * @return {Uint8ClampedArray|null} The image data.
   */ getImageData(image, col, row) {
        if (!pixelContext) {
            createPixelContext();
        }
        pixelContext.clearRect(0, 0, 1, 1);
        let data;
        try {
            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);
            data = pixelContext.getImageData(0, 0, 1, 1).data;
        } catch  {
            pixelContext = null;
            return null;
        }
        return data;
    }
    /**
   * @param {import('../../Map.js').FrameState} frameState Frame state.
   * @return {string} Background color.
   */ getBackground(frameState) {
        const layer = this.getLayer();
        let background = layer.getBackground();
        if (typeof background === 'function') {
            background = background(frameState.viewState.resolution);
        }
        return background || undefined;
    }
    /**
   * Get a rendering container from an existing target, if compatible.
   * @param {HTMLElement} target Potential render target.
   * @param {string} transform CSS transform matrix.
   * @param {string} [backgroundColor] Background color.
   */ useContainer(target, transform, backgroundColor) {
        const layerClassName = this.getLayer().getClassName();
        let container, context;
        if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asArray"])(target.style.backgroundColor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asArray"])(backgroundColor)))) {
            const canvas = target.firstElementChild;
            if (canvas instanceof HTMLCanvasElement) {
                context = canvas.getContext('2d');
            }
        }
        if (context && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equivalent"])(context.canvas.style.transform, transform)) {
            // Container of the previous layer renderer can be used.
            this.container = target;
            this.context = context;
            this.containerReused = true;
        } else if (this.containerReused) {
            // Previously reused container cannot be used any more.
            this.container = null;
            this.context = null;
            this.containerReused = false;
        } else if (this.container) {
            this.container.style.backgroundColor = null;
        }
        if (!this.container) {
            container = document.createElement('div');
            container.className = layerClassName;
            let style = container.style;
            style.position = 'absolute';
            style.width = '100%';
            style.height = '100%';
            context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])();
            const canvas = context.canvas;
            container.appendChild(canvas);
            style = canvas.style;
            style.position = 'absolute';
            style.left = '0';
            style.transformOrigin = 'top left';
            this.container = container;
            this.context = context;
        }
        if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) {
            this.container.style.backgroundColor = backgroundColor;
        }
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../extent.js").Extent} extent Clip extent.
   * @protected
   */ clipUnrotated(context, frameState, extent) {
        const topLeft = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTopLeft"])(extent);
        const topRight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTopRight"])(extent);
        const bottomRight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBottomRight"])(extent);
        const bottomLeft = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBottomLeft"])(extent);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(frameState.coordinateToPixelTransform, topLeft);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(frameState.coordinateToPixelTransform, topRight);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(frameState.coordinateToPixelTransform, bottomRight);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(frameState.coordinateToPixelTransform, bottomLeft);
        const inverted = this.inversePixelTransform;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(inverted, topLeft);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(inverted, topRight);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(inverted, bottomRight);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(inverted, bottomLeft);
        context.save();
        context.beginPath();
        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
        context.clip();
    }
    /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target that may be used to render content to.
   * @protected
   */ prepareContainer(frameState, target) {
        const extent = frameState.extent;
        const resolution = frameState.viewState.resolution;
        const rotation = frameState.viewState.rotation;
        const pixelRatio = frameState.pixelRatio;
        const width = Math.round((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(extent) / resolution * pixelRatio);
        const height = Math.round((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getHeight"])(extent) / resolution * pixelRatio);
        // set forward and inverse pixel transforms
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["makeInverse"])(this.inversePixelTransform, this.pixelTransform);
        const canvasTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toString"])(this.pixelTransform);
        this.useContainer(target, canvasTransform, this.getBackground(frameState));
        if (!this.containerReused) {
            const canvas = this.context.canvas;
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
            } else {
                this.context.clearRect(0, 0, width, height);
            }
            if (canvasTransform !== canvas.style.transform) {
                canvas.style.transform = canvasTransform;
            }
        }
    }
    /**
   * @param {import("../../render/EventType.js").default} type Event type.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @private
   */ dispatchRenderEvent_(type, context, frameState) {
        const layer = this.getLayer();
        if (layer.hasListener(type)) {
            const event = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$Event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](type, this.inversePixelTransform, frameState, context);
            layer.dispatchEvent(event);
        }
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @protected
   */ preRender(context, frameState) {
        this.frameState = frameState;
        if (frameState.declutter) {
            return;
        }
        this.dispatchRenderEvent_(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].PRERENDER, context, frameState);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @protected
   */ postRender(context, frameState) {
        if (frameState.declutter) {
            return;
        }
        this.dispatchRenderEvent_(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].POSTRENDER, context, frameState);
    }
    /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   */ renderDeferredInternal(frameState) {}
    /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.
   */ getRenderContext(frameState) {
        if (frameState.declutter && !this.deferredContext_) {
            this.deferredContext_ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ZIndexContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
        }
        return frameState.declutter ? this.deferredContext_.getContext() : this.context;
    }
    /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @override
   */ renderDeferred(frameState) {
        if (!frameState.declutter) {
            return;
        }
        this.dispatchRenderEvent_(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].PRERENDER, this.context, frameState);
        if (frameState.declutter && this.deferredContext_) {
            this.deferredContext_.draw(this.context);
            this.deferredContext_.clear();
        }
        this.renderDeferredInternal(frameState);
        this.dispatchRenderEvent_(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].POSTRENDER, this.context, frameState);
    }
    /**
   * Creates a transform for rendering to an element that will be rotated after rendering.
   * @param {import("../../coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} width Width of the rendered element (in pixels).
   * @param {number} height Height of the rendered element (in pixels).
   * @param {number} offsetX Offset on the x-axis in view coordinates.
   * @protected
   * @return {!import("../../transform.js").Transform} Transform.
   */ getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {
        const dx1 = width / 2;
        const dy1 = height / 2;
        const sx = pixelRatio / resolution;
        const sy = -sx;
        const dx2 = -center[0] + offsetX;
        const dy2 = -center[1];
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);
    }
    /**
   * Clean up.
   * @override
   */ disposeInternal() {
        delete this.frameState;
        super.disposeInternal();
    }
}
const __TURBOPACK__default__export__ = CanvasLayerRenderer;
}),
"[project]/node_modules/ol/renderer/canvas/TileLayer.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/canvas/TileLayer
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$DataTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/DataTile.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/ImageTile.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileRange$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/TileRange.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/TileState.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/proj.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$reproj$2f$Tile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/reproj/Tile.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$size$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/size.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$structs$2f$LRUCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/structs/LRUCache.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$tilecoord$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/tilecoord.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/util.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$canvas$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/renderer/canvas/Layer.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @param {import("../../source/Tile.js").default} source The tile source.
 * @param {string} sourceKey The source key.
 * @param {number} z The tile z level.
 * @param {number} x The tile x level.
 * @param {number} y The tile y level.
 * @return {string} The cache key.
 */ function getCacheKey(source, sourceKey, z, x, y) {
    return `${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(source)},${sourceKey},${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$tilecoord$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getKeyZXY"])(z, x, y)}`;
}
/**
 * @typedef {Object<number, Set<import("../../Tile.js").default>>} TileLookup
 */ /**
 * Add a tile to the lookup.
 * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
 * @param {import("../../Tile.js").default} tile A tile.
 * @param {number} z The zoom level.
 * @return {boolean} The tile was added to the lookup.
 */ function addTileToLookup(tilesByZ, tile, z) {
    if (!(z in tilesByZ)) {
        tilesByZ[z] = new Set([
            tile
        ]);
        return true;
    }
    const set = tilesByZ[z];
    const existing = set.has(tile);
    if (!existing) {
        set.add(tile);
    }
    return !existing;
}
/**
 * Remove a tile from the lookup.
 * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
 * @param {import("../../Tile.js").default} tile A tile.
 * @param {number} z The zoom level.
 * @return {boolean} The tile was removed from the lookup.
 */ function removeTileFromLookup(tilesByZ, tile, z) {
    const set = tilesByZ[z];
    if (set) {
        return set.delete(tile);
    }
    return false;
}
/**
 * @param {import("../../Map.js").FrameState} frameState Frame state.
 * @param {import("../../extent.js").Extent} extent The frame extent.
 * @return {import("../../extent.js").Extent} Frame extent intersected with layer extents.
 */ function getRenderExtent(frameState, extent) {
    const layerState = frameState.layerStatesArray[frameState.layerIndex];
    if (layerState.extent) {
        extent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getIntersection"])(extent, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromUserExtent"])(layerState.extent, frameState.viewState.projection));
    }
    const source = layerState.layer.getRenderSource();
    if (!source.getWrapX()) {
        const gridExtent = source.getTileGridForProjection(frameState.viewState.projection).getExtent();
        if (gridExtent) {
            extent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getIntersection"])(extent, gridExtent);
        }
    }
    return extent;
}
/**
 * @typedef {Object} Options
 * @property {number} [cacheSize=512] The cache size.
 */ /**
 * @classdesc
 * Canvas renderer for tile layers.
 * @api
 * @template {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} [LayerType=import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default]
 * @extends {CanvasLayerRenderer<LayerType>}
 */ class CanvasTileLayerRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$canvas$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {LayerType} tileLayer Tile layer.
   * @param {Options} [options] Options.
   */ constructor(tileLayer, options){
        super(tileLayer);
        options = options || {};
        /**
     * Rendered extent has changed since the previous `renderFrame()` call
     * @type {boolean}
     */ this.extentChanged = true;
        /**
     * The last call to `renderFrame` was completed with all tiles loaded
     * @type {boolean}
     */ this.renderComplete = false;
        /**
     * @private
     * @type {?import("../../extent.js").Extent}
     */ this.renderedExtent_ = null;
        /**
     * @protected
     * @type {number}
     */ this.renderedPixelRatio;
        /**
     * @protected
     * @type {import("../../proj/Projection.js").default|null}
     */ this.renderedProjection = null;
        /**
     * @protected
     * @type {!Array<import("../../Tile.js").default>}
     */ this.renderedTiles = [];
        /**
     * @private
     * @type {string}
     */ this.renderedSourceKey_;
        /**
     * @private
     * @type {number}
     */ this.renderedSourceRevision_;
        /**
     * @protected
     * @type {import("../../extent.js").Extent}
     */ this.tempExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createEmpty"])();
        /**
     * @private
     * @type {import("../../TileRange.js").default}
     */ this.tempTileRange_ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileRange$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](0, 0, 0, 0);
        /**
     * @type {import("../../tilecoord.js").TileCoord}
     * @private
     */ this.tempTileCoord_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$tilecoord$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createOrUpdate"])(0, 0, 0);
        const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;
        /**
     * @type {import("../../structs/LRUCache.js").default<import("../../Tile.js").default>}
     * @private
     */ this.tileCache_ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$structs$2f$LRUCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](cacheSize);
        this.maxStaleKeys = cacheSize * 0.5;
    }
    /**
   * @return {LRUCache} Tile cache.
   */ getTileCache() {
        return this.tileCache_;
    }
    /**
   * Get a tile from the cache or create one if needed.
   *
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {import("../../Tile.js").default|null} Tile (or null if outside source extent).
   * @protected
   */ getOrCreateTile(z, x, y, frameState) {
        const tileCache = this.tileCache_;
        const tileLayer = this.getLayer();
        const tileSource = tileLayer.getSource();
        const cacheKey = getCacheKey(tileSource, tileSource.getKey(), z, x, y);
        /** @type {import("../../Tile.js").default} */ let tile;
        if (tileCache.containsKey(cacheKey)) {
            tile = tileCache.get(cacheKey);
        } else {
            tile = tileSource.getTile(z, x, y, frameState.pixelRatio, frameState.viewState.projection);
            if (!tile) {
                return null;
            }
            tileCache.set(cacheKey, tile);
        }
        return tile;
    }
    /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {import("../../Tile.js").default|null} Tile (or null if outside source extent).
   * @protected
   */ getTile(z, x, y, frameState) {
        const tile = this.getOrCreateTile(z, x, y, frameState);
        if (!tile) {
            return null;
        }
        return tile;
    }
    /**
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray} Data at the pixel location.
   * @override
   */ getData(pixel) {
        const frameState = this.frameState;
        if (!frameState) {
            return null;
        }
        const layer = this.getLayer();
        const coordinate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(frameState.pixelToCoordinateTransform, pixel.slice());
        const layerExtent = layer.getExtent();
        if (layerExtent) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCoordinate"])(layerExtent, coordinate)) {
                return null;
            }
        }
        const viewState = frameState.viewState;
        const source = layer.getRenderSource();
        const tileGrid = source.getTileGridForProjection(viewState.projection);
        const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);
        for(let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){
            const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
            const tile = this.getTile(z, tileCoord[1], tileCoord[2], frameState);
            if (!tile || tile.getState() !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
                continue;
            }
            const tileOrigin = tileGrid.getOrigin(z);
            const tileSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$size$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toSize"])(tileGrid.getTileSize(z));
            const tileResolution = tileGrid.getResolution(z);
            /**
       * @type {import('../../DataTile.js').ImageLike}
       */ let image;
            if (tile instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] || tile instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$reproj$2f$Tile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]) {
                image = tile.getImage();
            } else if (tile instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$DataTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]) {
                image = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$DataTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asImageLike"])(tile.getData());
                if (!image) {
                    continue;
                }
            } else {
                continue;
            }
            const col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));
            const row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));
            const gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));
            return this.getImageData(image, col + gutter, row + gutter);
        }
        return null;
    }
    /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   * @override
   */ prepareFrame(frameState) {
        if (!this.renderedProjection) {
            this.renderedProjection = frameState.viewState.projection;
        } else if (frameState.viewState.projection !== this.renderedProjection) {
            this.tileCache_.clear();
            this.renderedProjection = frameState.viewState.projection;
        }
        const source = this.getLayer().getSource();
        if (!source) {
            return false;
        }
        const sourceRevision = source.getRevision();
        if (!this.renderedSourceRevision_) {
            this.renderedSourceRevision_ = sourceRevision;
        } else if (this.renderedSourceRevision_ !== sourceRevision) {
            this.renderedSourceRevision_ = sourceRevision;
            if (this.renderedSourceKey_ === source.getKey()) {
                this.tileCache_.clear();
            }
        }
        return true;
    }
    /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../extent.js").Extent} extent The extent to be rendered.
   * @param {number} initialZ The zoom level.
   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
   * @param {number} preload Number of additional levels to load.
   */ enqueueTiles(frameState, extent, initialZ, tilesByZ, preload) {
        const viewState = frameState.viewState;
        const tileLayer = this.getLayer();
        const tileSource = tileLayer.getRenderSource();
        const tileGrid = tileSource.getTileGridForProjection(viewState.projection);
        const tileSourceKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(tileSource);
        if (!(tileSourceKey in frameState.wantedTiles)) {
            frameState.wantedTiles[tileSourceKey] = {};
        }
        const wantedTiles = frameState.wantedTiles[tileSourceKey];
        const map = tileLayer.getMapInternal();
        const minZ = Math.max(initialZ - preload, tileGrid.getMinZoom(), tileGrid.getZForResolution(Math.min(tileLayer.getMaxResolution(), map ? map.getView().getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0)) : tileGrid.getResolution(0)), tileSource.zDirection));
        const rotation = viewState.rotation;
        const viewport = rotation ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRotatedViewport"])(viewState.center, viewState.resolution, rotation, frameState.size) : undefined;
        for(let z = initialZ; z >= minZ; --z){
            const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);
            const tileResolution = tileGrid.getResolution(z);
            for(let x = tileRange.minX; x <= tileRange.maxX; ++x){
                for(let y = tileRange.minY; y <= tileRange.maxY; ++y){
                    if (rotation && !tileGrid.tileCoordIntersectsViewport([
                        z,
                        x,
                        y
                    ], viewport)) {
                        continue;
                    }
                    const tile = this.getTile(z, x, y, frameState);
                    if (!tile) {
                        continue;
                    }
                    const added = addTileToLookup(tilesByZ, tile, z);
                    if (!added) {
                        continue;
                    }
                    const tileQueueKey = tile.getKey();
                    wantedTiles[tileQueueKey] = true;
                    if (tile.getState() === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].IDLE) {
                        if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {
                            const tileCoord = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$tilecoord$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createOrUpdate"])(z, x, y, this.tempTileCoord_);
                            frameState.tileQueue.enqueue([
                                tile,
                                tileSourceKey,
                                tileGrid.getTileCoordCenter(tileCoord),
                                tileResolution
                            ]);
                        }
                    }
                }
            }
        }
    }
    /**
   * Look for tiles covering the provided tile coordinate at an alternate
   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.
   * @param {import("../../tilecoord.js").TileCoord} tileCoord The target tile coordinate.
   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.
   * @private
   */ findStaleTile_(tileCoord, tilesByZ) {
        const tileCache = this.tileCache_;
        const z = tileCoord[0];
        const x = tileCoord[1];
        const y = tileCoord[2];
        const staleKeys = this.getStaleKeys();
        for(let i = 0; i < staleKeys.length; ++i){
            const cacheKey = getCacheKey(this.getLayer().getSource(), staleKeys[i], z, x, y);
            if (tileCache.containsKey(cacheKey)) {
                const tile = tileCache.peek(cacheKey);
                if (tile.getState() === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
                    tile.endTransition((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(this));
                    addTileToLookup(tilesByZ, tile, z);
                    return true;
                }
            }
        }
        return false;
    }
    /**
   * Look for tiles covering the provided tile coordinate at an alternate
   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.
   * @param {import("../../tilegrid/TileGrid.js").default} tileGrid The tile grid.
   * @param {import("../../tilecoord.js").TileCoord} tileCoord The target tile coordinate.
   * @param {number} altZ The alternate zoom level.
   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.
   * @private
   */ findAltTiles_(tileGrid, tileCoord, altZ, tilesByZ) {
        const tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);
        if (!tileRange) {
            return false;
        }
        let covered = true;
        const tileCache = this.tileCache_;
        const source = this.getLayer().getRenderSource();
        const sourceKey = source.getKey();
        for(let x = tileRange.minX; x <= tileRange.maxX; ++x){
            for(let y = tileRange.minY; y <= tileRange.maxY; ++y){
                const cacheKey = getCacheKey(source, sourceKey, altZ, x, y);
                let loaded = false;
                if (tileCache.containsKey(cacheKey)) {
                    const tile = tileCache.peek(cacheKey);
                    if (tile.getState() === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
                        addTileToLookup(tilesByZ, tile, altZ);
                        loaded = true;
                    }
                }
                if (!loaded) {
                    covered = false;
                }
            }
        }
        return covered;
    }
    /**
   * Render the layer.
   *
   * The frame rendering logic has three parts:
   *
   *  1. Enqueue tiles
   *  2. Find alt tiles for those that are not yet loaded
   *  3. Render loaded tiles
   *
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target that may be used to render content to.
   * @return {HTMLElement} The rendered element.
   * @override
   */ renderFrame(frameState, target) {
        this.renderComplete = true;
        /**
     * TODO:
     *  maybe skip transition when not fully opaque
     *  decide if this.renderComplete is useful
     */ const layerState = frameState.layerStatesArray[frameState.layerIndex];
        const viewState = frameState.viewState;
        const projection = viewState.projection;
        const viewResolution = viewState.resolution;
        const viewCenter = viewState.center;
        const pixelRatio = frameState.pixelRatio;
        const tileLayer = this.getLayer();
        const tileSource = tileLayer.getSource();
        const tileGrid = tileSource.getTileGridForProjection(projection);
        const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
        const tileResolution = tileGrid.getResolution(z);
        const sourceKey = tileSource.getKey();
        if (!this.renderedSourceKey_) {
            this.renderedSourceKey_ = sourceKey;
        } else if (this.renderedSourceKey_ !== sourceKey) {
            this.prependStaleKey(this.renderedSourceKey_);
            this.renderedSourceKey_ = sourceKey;
        }
        let frameExtent = frameState.extent;
        const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
        this.prepareContainer(frameState, target);
        // desired dimensions of the canvas in pixels
        const width = this.context.canvas.width;
        const height = this.context.canvas.height;
        const layerExtent = layerState.extent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromUserExtent"])(layerState.extent, projection);
        if (layerExtent) {
            frameExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getIntersection"])(frameExtent, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromUserExtent"])(layerState.extent, projection));
        }
        const dx = tileResolution * width / 2 / tilePixelRatio;
        const dy = tileResolution * height / 2 / tilePixelRatio;
        const canvasExtent = [
            viewCenter[0] - dx,
            viewCenter[1] - dy,
            viewCenter[0] + dx,
            viewCenter[1] + dy
        ];
        /**
     * @type {TileLookup}
     */ const tilesByZ = {};
        this.renderedTiles.length = 0;
        /**
     * Part 1: Enqueue tiles
     */ const preload = tileLayer.getPreload();
        if (frameState.nextExtent) {
            const targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);
            const nextExtent = getRenderExtent(frameState, frameState.nextExtent);
            this.enqueueTiles(frameState, nextExtent, targetZ, tilesByZ, preload);
        }
        const renderExtent = getRenderExtent(frameState, frameExtent);
        this.enqueueTiles(frameState, renderExtent, z, tilesByZ, 0);
        if (preload > 0) {
            setTimeout(()=>{
                this.enqueueTiles(frameState, renderExtent, z - 1, tilesByZ, preload - 1);
            }, 0);
        }
        if (!(z in tilesByZ)) {
            return this.container;
        }
        /**
     * Part 2: Find alt tiles for those that are not yet loaded
     */ const uid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(this);
        const time = frameState.time;
        // look for cached tiles to use if a target tile is not ready
        for (const tile of tilesByZ[z]){
            const tileState = tile.getState();
            if (tileState === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].EMPTY) {
                continue;
            }
            const tileCoord = tile.tileCoord;
            if (tileState === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
                const alpha = tile.getAlpha(uid, time);
                if (alpha === 1) {
                    // no need to look for alt tiles
                    tile.endTransition(uid);
                    continue;
                }
            }
            if (tileState !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].ERROR) {
                this.renderComplete = false;
            }
            const hasStaleTile = this.findStaleTile_(tileCoord, tilesByZ);
            if (hasStaleTile) {
                // use the stale tile before the new tile's transition has completed
                removeTileFromLookup(tilesByZ, tile, z);
                frameState.animate = true;
                continue;
            }
            // first look for child tiles (at z + 1)
            const coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tilesByZ);
            if (coveredByChildren) {
                continue;
            }
            // next look for parent tiles
            const minZoom = tileGrid.getMinZoom();
            for(let parentZ = z - 1; parentZ >= minZoom; --parentZ){
                const coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tilesByZ);
                if (coveredByParent) {
                    break;
                }
            }
        }
        /**
     * Part 3: Render loaded tiles
     */ const canvasScale = tileResolution / viewResolution * pixelRatio / tilePixelRatio;
        const context = this.getRenderContext(frameState);
        // set scale transform for calculating tile positions on the canvas
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
        if (layerState.extent) {
            this.clipUnrotated(context, frameState, layerExtent);
        }
        if (!tileSource.getInterpolate()) {
            context.imageSmoothingEnabled = false;
        }
        this.preRender(context, frameState);
        /** @type {Array<number>} */ const zs = Object.keys(tilesByZ).map(Number);
        zs.sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ascending"]);
        let currentClip;
        const clips = [];
        const clipZs = [];
        for(let i = zs.length - 1; i >= 0; --i){
            const currentZ = zs[i];
            const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
            const currentResolution = tileGrid.getResolution(currentZ);
            const currentScale = currentResolution / tileResolution;
            const dx = currentTilePixelSize[0] * currentScale * canvasScale;
            const dy = currentTilePixelSize[1] * currentScale * canvasScale;
            const originTileCoord = tileGrid.getTileCoordForCoordAndZ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTopLeft"])(canvasExtent), currentZ);
            const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
            const origin = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(this.tempTransform, [
                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,
                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution
            ]);
            const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
            for (const tile of tilesByZ[currentZ]){
                if (tile.getState() !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$TileState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
                    continue;
                }
                const tileCoord = tile.tileCoord;
                // Calculate integer positions and sizes so that tiles align
                const xIndex = originTileCoord[1] - tileCoord[1];
                const nextX = Math.round(origin[0] - (xIndex - 1) * dx);
                const yIndex = originTileCoord[2] - tileCoord[2];
                const nextY = Math.round(origin[1] - (yIndex - 1) * dy);
                const x = Math.round(origin[0] - xIndex * dx);
                const y = Math.round(origin[1] - yIndex * dy);
                const w = nextX - x;
                const h = nextY - y;
                const transition = zs.length === 1;
                let contextSaved = false;
                // Clip mask for regions in this tile that already filled by a higher z tile
                currentClip = [
                    x,
                    y,
                    x + w,
                    y,
                    x + w,
                    y + h,
                    x,
                    y + h
                ];
                for(let i = 0, ii = clips.length; i < ii; ++i){
                    if (!transition && currentZ < clipZs[i]) {
                        const clip = clips[i];
                        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])([
                            x,
                            y,
                            x + w,
                            y + h
                        ], [
                            clip[0],
                            clip[3],
                            clip[4],
                            clip[7]
                        ])) {
                            if (!contextSaved) {
                                context.save();
                                contextSaved = true;
                            }
                            context.beginPath();
                            // counter-clockwise (outer ring) for current tile
                            context.moveTo(currentClip[0], currentClip[1]);
                            context.lineTo(currentClip[2], currentClip[3]);
                            context.lineTo(currentClip[4], currentClip[5]);
                            context.lineTo(currentClip[6], currentClip[7]);
                            // clockwise (inner ring) for higher z tile
                            context.moveTo(clip[6], clip[7]);
                            context.lineTo(clip[4], clip[5]);
                            context.lineTo(clip[2], clip[3]);
                            context.lineTo(clip[0], clip[1]);
                            context.clip();
                        }
                    }
                }
                clips.push(currentClip);
                clipZs.push(currentZ);
                this.drawTile(tile, frameState, x, y, w, h, tileGutter, transition);
                if (contextSaved) {
                    context.restore();
                }
                this.renderedTiles.unshift(tile);
                // TODO: decide if this is necessary
                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
            }
        }
        this.renderedResolution = tileResolution;
        this.extentChanged = !this.renderedExtent_ || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(this.renderedExtent_, canvasExtent);
        this.renderedExtent_ = canvasExtent;
        this.renderedPixelRatio = pixelRatio;
        this.postRender(this.context, frameState);
        if (layerState.extent) {
            context.restore();
        }
        context.imageSmoothingEnabled = true;
        if (this.renderComplete) {
            /**
       * @param {import("../../Map.js").default} map Map.
       * @param {import("../../Map.js").FrameState} frameState Frame state.
       */ const postRenderFunction = (map, frameState)=>{
                const tileSourceKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(tileSource);
                const wantedTiles = frameState.wantedTiles[tileSourceKey];
                const tilesCount = wantedTiles ? Object.keys(wantedTiles).length : 0;
                this.updateCacheSize(tilesCount);
                this.tileCache_.expireCache();
            };
            frameState.postRenderFunctions.push(postRenderFunction);
        }
        return this.container;
    }
    /**
   * Increases the cache size if needed
   * @param {number} tileCount Minimum number of tiles needed.
   */ updateCacheSize(tileCount) {
        this.tileCache_.highWaterMark = Math.max(this.tileCache_.highWaterMark, tileCount * 2);
    }
    /**
   * @param {import("../../Tile.js").default} tile Tile.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {number} x Left of the tile.
   * @param {number} y Top of the tile.
   * @param {number} w Width of the tile.
   * @param {number} h Height of the tile.
   * @param {number} gutter Tile gutter.
   * @param {boolean} transition Apply an alpha transition.
   * @protected
   */ drawTile(tile, frameState, x, y, w, h, gutter, transition) {
        let image;
        if (tile instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$DataTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]) {
            image = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$DataTile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asImageLike"])(tile.getData());
            if (!image) {
                throw new Error('Rendering array data is not yet supported');
            }
        } else {
            image = this.getTileImage(tile);
        }
        if (!image) {
            return;
        }
        const context = this.getRenderContext(frameState);
        const uid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(this);
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        const alpha = layerState.opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);
        const alphaChanged = alpha !== context.globalAlpha;
        if (alphaChanged) {
            context.save();
            context.globalAlpha = alpha;
        }
        context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
        if (alphaChanged) {
            context.restore();
        }
        if (alpha !== layerState.opacity) {
            frameState.animate = true;
        } else if (transition) {
            tile.endTransition(uid);
        }
    }
    /**
   * @return {HTMLCanvasElement} Image
   */ getImage() {
        const context = this.context;
        return context ? context.canvas : null;
    }
    /**
   * Get the image from a tile.
   * @param {import("../../ImageTile.js").default} tile Tile.
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   * @protected
   */ getTileImage(tile) {
        return tile.getImage();
    }
    /**
   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @param {import('../../Tile.js').default} tile Tile.
   * @protected
   */ updateUsedTiles(usedTiles, tileSource, tile) {
        // FIXME should we use tilesToDrawByZ instead?
        const tileSourceKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(tileSource);
        if (!(tileSourceKey in usedTiles)) {
            usedTiles[tileSourceKey] = {};
        }
        usedTiles[tileSourceKey][tile.getKey()] = true;
    }
}
const __TURBOPACK__default__export__ = CanvasTileLayerRenderer;
}),
"[project]/node_modules/ol/renderer/vector.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/vector
 */ __turbopack_context__.s([
    "defaultOrder",
    ()=>defaultOrder,
    "getSquaredTolerance",
    ()=>getSquaredTolerance,
    "getTolerance",
    ()=>getTolerance,
    "renderFeature",
    ()=>renderFeature
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/ImageState.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/util.js [app-ssr] (ecmascript)");
;
;
/**
 * Feature callback. The callback will be called with three arguments. The first
 * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}
 * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
 * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features
 * with a GeometryCollection geometry, it will be the first detected geometry from the collection.
 * @template T
 * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>, import("../geom/SimpleGeometry.js").default): T} FeatureCallback
 */ /**
 * Tolerance for geometry simplification in device pixels.
 * @type {number}
 */ const SIMPLIFY_TOLERANCE = 0.5;
/**
 * @const
 * @type {Object<import("../geom/Geometry.js").Type,
 *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
 *                         import("../style/Style.js").default, Object): void>}
 */ const GEOMETRY_RENDERERS = {
    'Point': renderPointGeometry,
    'LineString': renderLineStringGeometry,
    'Polygon': renderPolygonGeometry,
    'MultiPoint': renderMultiPointGeometry,
    'MultiLineString': renderMultiLineStringGeometry,
    'MultiPolygon': renderMultiPolygonGeometry,
    'GeometryCollection': renderGeometryCollectionGeometry,
    'Circle': renderCircleGeometry
};
function defaultOrder(feature1, feature2) {
    return parseInt((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(feature1), 10) - parseInt((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(feature2), 10);
}
function getSquaredTolerance(resolution, pixelRatio) {
    const tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
}
function getTolerance(resolution, pixelRatio) {
    return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
 * @param {import("../geom/Circle.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {number} [index] Render order index.
 */ function renderCircleGeometry(builderGroup, geometry, style, feature, index) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
        const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');
        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        circleReplay.drawCircle(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
function renderFeature(replayGroup, feature, style, squaredTolerance, listener, transform, declutter, index) {
    const loadingPromises = [];
    const imageStyle = style.getImage();
    if (imageStyle) {
        let loading = true;
        const imageState = imageStyle.getImageState();
        if (imageState == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED || imageState == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].ERROR) {
            loading = false;
        } else {
            if (imageState == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].IDLE) {
                imageStyle.load();
            }
        }
        if (loading) {
            loadingPromises.push(imageStyle.ready());
        }
    }
    const fillStyle = style.getFill();
    if (fillStyle && fillStyle.loading()) {
        loadingPromises.push(fillStyle.ready());
    }
    const loading = loadingPromises.length > 0;
    if (loading) {
        Promise.all(loadingPromises).then(()=>listener(null));
    }
    renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutter, index);
    return loading;
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../style/Style.js").default} style Style.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
 * @param {boolean} [declutter] Enable decluttering.
 * @param {number} [index] Render order index..
 */ function renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutter, index) {
    const geometry = style.getGeometryFunction()(feature);
    if (!geometry) {
        return;
    }
    const simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, transform);
    const renderer = style.getRenderer();
    if (renderer) {
        renderGeometry(replayGroup, simplifiedGeometry, style, feature, index);
    } else {
        const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, index, declutter);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} [index] Render order index.
 */ function renderGeometry(replayGroup, geometry, style, feature, index) {
    if (geometry.getType() == 'GeometryCollection') {
        const geometries = /** @type {import("../geom/GeometryCollection.js").default} */ geometry.getGeometries();
        for(let i = 0, ii = geometries.length; i < ii; ++i){
            renderGeometry(replayGroup, geometries[i], style, feature, index);
        }
        return;
    }
    const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');
    replay.drawCustom(geometry, feature, style.getRenderer(), style.getHitDetectionRenderer(), index);
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 * @param {number} [index] Render order index.
 */ function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, declutterBuilderGroup, index) {
    const geometries = geometry.getGeometriesArray();
    let i, ii;
    for(i = 0, ii = geometries.length; i < ii; ++i){
        const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
        geometryRenderer(replayGroup, geometries[i], style, feature, declutterBuilderGroup, index);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} [index] Render order index.
 */ function renderLineStringGeometry(builderGroup, geometry, style, feature, index) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');
        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
        lineStringReplay.drawLineString(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature, index);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} [index] Render order index.
 */ function renderMultiLineStringGeometry(builderGroup, geometry, style, feature, index) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');
        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
        lineStringReplay.drawMultiLineString(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature, index);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {number} [index] Render order index.
 */ function renderMultiPolygonGeometry(builderGroup, geometry, style, feature, index) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');
        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        polygonReplay.drawMultiPolygon(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature, index);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} [index] Render order index.
 * @param {boolean} [declutter] Enable decluttering.
 */ function renderPointGeometry(builderGroup, geometry, style, feature, index, declutter) {
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    const hasText = textStyle && textStyle.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */ const declutterImageWithText = declutter && imageStyle && hasText ? {} : undefined;
    if (imageStyle) {
        if (imageStyle.getImageState() != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
            return;
        }
        const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');
        imageReplay.setImageStyle(imageStyle, declutterImageWithText);
        imageReplay.drawPoint(geometry, feature, index);
    }
    if (hasText) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle, declutterImageWithText);
        textReplay.drawText(geometry, feature, index);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} [index] Render order index.
 * @param {boolean} [declutter] Enable decluttering.
 */ function renderMultiPointGeometry(builderGroup, geometry, style, feature, index, declutter) {
    const imageStyle = style.getImage();
    const hasImage = imageStyle && imageStyle.getOpacity() !== 0;
    const textStyle = style.getText();
    const hasText = textStyle && textStyle.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */ const declutterImageWithText = declutter && hasImage && hasText ? {} : undefined;
    if (hasImage) {
        if (imageStyle.getImageState() != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ImageState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].LOADED) {
            return;
        }
        const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');
        imageReplay.setImageStyle(imageStyle, declutterImageWithText);
        imageReplay.drawMultiPoint(geometry, feature, index);
    }
    if (hasText) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle, declutterImageWithText);
        textReplay.drawText(geometry, feature, index);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} [index] Render order index.
 */ function renderPolygonGeometry(builderGroup, geometry, style, feature, index) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');
        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        polygonReplay.drawPolygon(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature, index);
    }
}
}),
"[project]/node_modules/ol/renderer/canvas/VectorLayer.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/renderer/canvas/VectorLayer
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ViewHint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/ViewHint.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$coordinate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/coordinate.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/proj.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/EventType.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$BuilderGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/BuilderGroup.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ExecutorGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/ExecutorGroup.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/hitdetect.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/util.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/renderer/vector.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$canvas$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/renderer/canvas/Layer.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @classdesc
 * Canvas renderer for vector layers.
 * @api
 */ class CanvasVectorLayerRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$canvas$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.
   */ constructor(vectorLayer){
        super(vectorLayer);
        /** @private */ this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);
        /**
     * @private
     * @type {boolean}
     */ this.animatingOrInteracting_;
        /**
     * @private
     * @type {ImageData|null}
     */ this.hitDetectionImageData_ = null;
        /**
     * @private
     * @type {boolean}
     */ this.clipped_ = false;
        /**
     * @private
     * @type {Array<import("../../Feature.js").default>}
     */ this.renderedFeatures_ = null;
        /**
     * @private
     * @type {number}
     */ this.renderedRevision_ = -1;
        /**
     * @private
     * @type {number}
     */ this.renderedResolution_ = NaN;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.renderedExtent_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createEmpty"])();
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.wrappedRenderedExtent_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createEmpty"])();
        /**
     * @private
     * @type {number}
     */ this.renderedRotation_;
        /**
     * @private
     * @type {import("../../coordinate").Coordinate}
     */ this.renderedCenter_ = null;
        /**
     * @private
     * @type {import("../../proj/Projection").default}
     */ this.renderedProjection_ = null;
        /**
     * @private
     * @type {number}
     */ this.renderedPixelRatio_ = 1;
        /**
     * @private
     * @type {import("../../render.js").OrderFunction|null}
     */ this.renderedRenderOrder_ = null;
        /**
     * @private
     * @type {boolean}
     */ this.renderedFrameDeclutter_;
        /**
     * @private
     * @type {import("../../render/canvas/ExecutorGroup").default}
     */ this.replayGroup_ = null;
        /**
     * A new replay group had to be created by `prepareFrame()`
     * @type {boolean}
     */ this.replayGroupChanged = true;
        /**
     * Clipping to be performed by `renderFrame()`
     * @type {boolean}
     */ this.clipping = true;
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.targetContext_ = null;
        /**
     * @private
     * @type {number}
     */ this.opacity_ = 1;
    }
    /**
   * @param {ExecutorGroup} executorGroup Executor group.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {boolean} [declutterable] `true` to only render declutterable items,
   *     `false` to only render non-declutterable items, `undefined` to render all.
   */ renderWorlds(executorGroup, frameState, declutterable) {
        const extent = frameState.extent;
        const viewState = frameState.viewState;
        const center = viewState.center;
        const resolution = viewState.resolution;
        const projection = viewState.projection;
        const rotation = viewState.rotation;
        const projectionExtent = projection.getExtent();
        const vectorSource = this.getLayer().getSource();
        const declutter = this.getLayer().getDeclutter();
        const pixelRatio = frameState.pixelRatio;
        const viewHints = frameState.viewHints;
        const snapToPixel = !(viewHints[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ViewHint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].ANIMATING] || viewHints[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ViewHint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].INTERACTING]);
        const context = this.context;
        const width = Math.round((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(extent) / resolution * pixelRatio);
        const height = Math.round((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getHeight"])(extent) / resolution * pixelRatio);
        const multiWorld = vectorSource.getWrapX() && projection.canWrapX();
        const worldWidth = multiWorld ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(projectionExtent) : null;
        const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;
        let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;
        do {
            let transform = this.getRenderTransform(center, resolution, 0, pixelRatio, width, height, world * worldWidth);
            if (frameState.declutter) {
                transform = transform.slice(0);
            }
            executorGroup.execute(context, [
                context.canvas.width,
                context.canvas.height
            ], transform, rotation, snapToPixel, declutterable === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ExecutorGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ALL"] : declutterable ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ExecutorGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DECLUTTER"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ExecutorGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NON_DECLUTTER"], declutterable ? declutter && frameState.declutter[declutter] : undefined);
        }while (++world < endWorld)
    }
    /**
   * @private
   */ setDrawContext_() {
        if (this.opacity_ !== 1) {
            this.targetContext_ = this.context;
            this.context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])(this.context.canvas.width, this.context.canvas.height, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$canvas$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["canvasPool"]);
        }
    }
    /**
   * @private
   */ resetDrawContext_() {
        if (this.opacity_ !== 1 && this.targetContext_) {
            const alpha = this.targetContext_.globalAlpha;
            this.targetContext_.globalAlpha = this.opacity_;
            this.targetContext_.drawImage(this.context.canvas, 0, 0);
            this.targetContext_.globalAlpha = alpha;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["releaseCanvas"])(this.context);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$canvas$2f$Layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["canvasPool"].push(this.context.canvas);
            this.context = this.targetContext_;
            this.targetContext_ = null;
        }
    }
    /**
   * Render declutter items for this layer
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   */ renderDeclutter(frameState) {
        if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {
            return;
        }
        this.renderWorlds(this.replayGroup_, frameState, true);
    }
    /**
   * Render deferred instructions.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @override
   */ renderDeferredInternal(frameState) {
        if (!this.replayGroup_) {
            return;
        }
        this.replayGroup_.renderDeferred();
        if (this.clipped_) {
            this.context.restore();
        }
        this.resetDrawContext_();
    }
    /**
   * Render the layer.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement|null} target Target that may be used to render content to.
   * @return {HTMLElement} The rendered element.
   * @override
   */ renderFrame(frameState, target) {
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        this.opacity_ = layerState.opacity;
        const viewState = frameState.viewState;
        this.prepareContainer(frameState, target);
        const context = this.context;
        const replayGroup = this.replayGroup_;
        let render = replayGroup && !replayGroup.isEmpty();
        if (!render) {
            const hasRenderListeners = this.getLayer().hasListener(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].PRERENDER) || this.getLayer().hasListener(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$EventType$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].POSTRENDER);
            if (!hasRenderListeners) {
                return this.container;
            }
        }
        this.setDrawContext_();
        this.preRender(context, frameState);
        const projection = viewState.projection;
        // clipped rendering if layer extent is set
        this.clipped_ = false;
        if (render && layerState.extent && this.clipping) {
            const layerExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromUserExtent"])(layerState.extent, projection);
            render = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(layerExtent, frameState.extent);
            this.clipped_ = render && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsExtent"])(layerExtent, frameState.extent);
            if (this.clipped_) {
                this.clipUnrotated(context, frameState, layerExtent);
            }
        }
        if (render) {
            this.renderWorlds(replayGroup, frameState, this.getLayer().getDeclutter() ? false : undefined);
        }
        if (!frameState.declutter && this.clipped_) {
            context.restore();
        }
        this.postRender(context, frameState);
        if (this.renderedRotation_ !== viewState.rotation) {
            this.renderedRotation_ = viewState.rotation;
            this.hitDetectionImageData_ = null;
        }
        if (!frameState.declutter) {
            this.resetDrawContext_();
        }
        return this.container;
    }
    /**
   * Asynchronous layer level hit detection.
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../../Feature").default>>} Promise
   * that resolves with an array of features.
   * @override
   */ getFeatures(pixel) {
        return new Promise((resolve)=>{
            if (this.frameState && !this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                const size = this.frameState.size.slice();
                const center = this.renderedCenter_;
                const resolution = this.renderedResolution_;
                const rotation = this.renderedRotation_;
                const projection = this.renderedProjection_;
                const extent = this.wrappedRenderedExtent_;
                const layer = this.getLayer();
                const transforms = [];
                const width = size[0] * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HIT_DETECT_RESOLUTION"];
                const height = size[1] * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HIT_DETECT_RESOLUTION"];
                transforms.push(this.getRenderTransform(center, resolution, rotation, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HIT_DETECT_RESOLUTION"], width, height, 0).slice());
                const source = layer.getSource();
                const projectionExtent = projection.getExtent();
                if (source.getWrapX() && projection.canWrapX() && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsExtent"])(projectionExtent, extent)) {
                    let startX = extent[0];
                    const worldWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(projectionExtent);
                    let world = 0;
                    let offsetX;
                    while(startX < projectionExtent[0]){
                        --world;
                        offsetX = worldWidth * world;
                        transforms.push(this.getRenderTransform(center, resolution, rotation, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HIT_DETECT_RESOLUTION"], width, height, offsetX).slice());
                        startX += worldWidth;
                    }
                    world = 0;
                    startX = extent[2];
                    while(startX > projectionExtent[2]){
                        ++world;
                        offsetX = worldWidth * world;
                        transforms.push(this.getRenderTransform(center, resolution, rotation, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HIT_DETECT_RESOLUTION"], width, height, offsetX).slice());
                        startX -= worldWidth;
                    }
                }
                const userProjection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getUserProjection"])();
                this.hitDetectionImageData_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createHitDetectionImageData"])(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSquaredTolerance"])(resolution, this.renderedPixelRatio_), userProjection ? projection : null);
            }
            resolve((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$hitdetect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hitDetect"])(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
        });
    }
    /**
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
   * @return {T|undefined} Callback result.
   * @template T
   * @override
   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {
        if (!this.replayGroup_) {
            return undefined;
        }
        const resolution = frameState.viewState.resolution;
        const rotation = frameState.viewState.rotation;
        const layer = this.getLayer();
        /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */ const features = {};
        /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} distanceSq The squared distance to the click position
     * @return {T|undefined} Callback result.
     */ const featureCallback = function(feature, geometry, distanceSq) {
            const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(feature);
            const match = features[key];
            if (!match) {
                if (distanceSq === 0) {
                    features[key] = true;
                    return callback(feature, layer, geometry);
                }
                matches.push(features[key] = {
                    feature: feature,
                    layer: layer,
                    geometry: geometry,
                    distanceSq: distanceSq,
                    callback: callback
                });
            } else if (match !== true && distanceSq < match.distanceSq) {
                if (distanceSq === 0) {
                    features[key] = true;
                    matches.splice(matches.lastIndexOf(match), 1);
                    return callback(feature, layer, geometry);
                }
                match.geometry = geometry;
                match.distanceSq = distanceSq;
            }
            return undefined;
        };
        const declutter = this.getLayer().getDeclutter();
        return this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutter ? frameState.declutter?.[declutter]?.all().map((item)=>item.value) : null);
    }
    /**
   * Perform action necessary to get the layer rendered after new fonts have loaded
   * @override
   */ handleFontsChanged() {
        const layer = this.getLayer();
        if (layer.getVisible() && this.replayGroup_) {
            layer.changed();
        }
    }
    /**
   * Handle changes in image style state.
   * @param {import("../../events/Event.js").default} event Image style change event.
   * @private
   */ handleStyleImageChange_(event) {
        this.renderIfReadyAndVisible();
    }
    /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   * @override
   */ prepareFrame(frameState) {
        const vectorLayer = this.getLayer();
        const vectorSource = vectorLayer.getSource();
        if (!vectorSource) {
            return false;
        }
        const animating = frameState.viewHints[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ViewHint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].ANIMATING];
        const interacting = frameState.viewHints[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$ViewHint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].INTERACTING];
        const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
        const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
        if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {
            this.animatingOrInteracting_ = true;
            return true;
        }
        this.animatingOrInteracting_ = false;
        const frameStateExtent = frameState.extent;
        const viewState = frameState.viewState;
        const projection = viewState.projection;
        const resolution = viewState.resolution;
        const pixelRatio = frameState.pixelRatio;
        const vectorLayerRevision = vectorLayer.getRevision();
        const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
        let vectorLayerRenderOrder = vectorLayer.getRenderOrder();
        if (vectorLayerRenderOrder === undefined) {
            vectorLayerRenderOrder = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultOrder"];
        }
        const center = viewState.center.slice();
        const extent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buffer"])(frameStateExtent, vectorLayerRenderBuffer * resolution);
        const renderedExtent = extent.slice();
        const loadExtents = [
            extent.slice()
        ];
        const projectionExtent = projection.getExtent();
        if (vectorSource.getWrapX() && projection.canWrapX() && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsExtent"])(projectionExtent, frameState.extent)) {
            // For the replay group, we need an extent that intersects the real world
            // (-180° to +180°). To support geometries in a coordinate range from -540°
            // to +540°, we add at least 1 world width on each side of the projection
            // extent. If the viewport is wider than the world, we need to add half of
            // the viewport width to make sure we cover the whole viewport.
            const worldWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(projectionExtent);
            const gutter = Math.max((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWidth"])(extent) / 2, worldWidth);
            extent[0] = projectionExtent[0] - gutter;
            extent[2] = projectionExtent[2] + gutter;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$coordinate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["wrapX"])(center, projection);
            const loadExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["wrapX"])(loadExtents[0], projection);
            // If the extent crosses the date line, we load data for both edges of the worlds
            if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {
                loadExtents.push([
                    loadExtent[0] + worldWidth,
                    loadExtent[1],
                    loadExtent[2] + worldWidth,
                    loadExtent[3]
                ]);
            } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {
                loadExtents.push([
                    loadExtent[0] - worldWidth,
                    loadExtent[1],
                    loadExtent[2] - worldWidth,
                    loadExtent[3]
                ]);
            }
        }
        if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && this.renderedFrameDeclutter_ === !!frameState.declutter && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsExtent"])(this.wrappedRenderedExtent_, extent)) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(this.renderedExtent_, renderedExtent)) {
                this.hitDetectionImageData_ = null;
                this.renderedExtent_ = renderedExtent;
            }
            this.renderedCenter_ = center;
            this.replayGroupChanged = false;
            return true;
        }
        this.replayGroup_ = null;
        const replayGroup = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$BuilderGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTolerance"])(resolution, pixelRatio), extent, resolution, pixelRatio);
        const userProjection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getUserProjection"])();
        let userTransform;
        if (userProjection) {
            for(let i = 0, ii = loadExtents.length; i < ii; ++i){
                const extent = loadExtents[i];
                const userExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toUserExtent"])(extent, projection);
                vectorSource.loadFeatures(userExtent, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toUserResolution"])(resolution, projection), userProjection);
            }
            userTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getTransformFromProjections"])(userProjection, projection);
        } else {
            for(let i = 0, ii = loadExtents.length; i < ii; ++i){
                vectorSource.loadFeatures(loadExtents[i], resolution, projection);
            }
        }
        const squaredTolerance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSquaredTolerance"])(resolution, pixelRatio);
        let ready = true;
        const render = /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @param {number} index Index.
       */ (feature, index)=>{
            let styles;
            const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
            if (styleFunction) {
                styles = styleFunction(feature, resolution);
            }
            if (styles) {
                const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, this.getLayer().getDeclutter(), index);
                ready = ready && !dirty;
            }
        };
        const userExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toUserExtent"])(extent, projection);
        /** @type {Array<import("../../Feature.js").default>} */ const features = vectorSource.getFeaturesInExtent(userExtent);
        if (vectorLayerRenderOrder) {
            features.sort(vectorLayerRenderOrder);
        }
        for(let i = 0, ii = features.length; i < ii; ++i){
            render(features[i], i);
        }
        this.renderedFeatures_ = features;
        this.ready = ready;
        const replayGroupInstructions = replayGroup.finish();
        const executorGroup = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ExecutorGroup$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer(), !!frameState.declutter);
        this.renderedResolution_ = resolution;
        this.renderedRevision_ = vectorLayerRevision;
        this.renderedRenderOrder_ = vectorLayerRenderOrder;
        this.renderedFrameDeclutter_ = !!frameState.declutter;
        this.renderedExtent_ = renderedExtent;
        this.wrappedRenderedExtent_ = extent;
        this.renderedCenter_ = center;
        this.renderedProjection_ = projection;
        this.renderedPixelRatio_ = pixelRatio;
        this.replayGroup_ = executorGroup;
        this.hitDetectionImageData_ = null;
        this.replayGroupChanged = true;
        return true;
    }
    /**
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {number} squaredTolerance Squared render tolerance.
   * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
   * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../../proj.js").TransformFunction} [transform] Transform from user to view projection.
   * @param {boolean} [declutter] Enable decluttering.
   * @param {number} [index] Render order index.
   * @return {boolean} `true` if an image is loading.
   */ renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutter, index) {
        if (!styles) {
            return false;
        }
        let loading = false;
        if (Array.isArray(styles)) {
            for(let i = 0, ii = styles.length; i < ii; ++i){
                loading = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["renderFeature"])(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index) || loading;
            }
        } else {
            loading = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$renderer$2f$vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["renderFeature"])(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index);
        }
        return loading;
    }
}
const __TURBOPACK__default__export__ = CanvasVectorLayerRenderer;
}),
];

//# sourceMappingURL=node_modules_ol_renderer_c08b1bb5._.js.map