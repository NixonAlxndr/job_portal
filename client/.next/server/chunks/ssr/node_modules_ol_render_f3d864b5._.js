module.exports = [
"[project]/node_modules/ol/render/Box.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/Box
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Disposable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/Disposable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$Polygon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/Polygon.js [app-ssr] (ecmascript)");
;
;
class RenderBox extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Disposable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {string} className CSS class name.
   */ constructor(className){
        super();
        /**
     * @type {import("../geom/Polygon.js").default}
     * @private
     */ this.geometry_ = null;
        /**
     * @type {HTMLDivElement}
     * @private
     */ this.element_ = document.createElement('div');
        this.element_.style.position = 'absolute';
        this.element_.style.pointerEvents = 'auto';
        this.element_.className = 'ol-box ' + className;
        /**
     * @private
     * @type {import("../Map.js").default|null}
     */ this.map_ = null;
        /**
     * @private
     * @type {import("../pixel.js").Pixel}
     */ this.startPixel_ = null;
        /**
     * @private
     * @type {import("../pixel.js").Pixel}
     */ this.endPixel_ = null;
    }
    /**
   * Clean up.
   * @override
   */ disposeInternal() {
        this.setMap(null);
    }
    /**
   * @private
   */ render_() {
        const startPixel = this.startPixel_;
        const endPixel = this.endPixel_;
        const px = 'px';
        const style = this.element_.style;
        style.left = Math.min(startPixel[0], endPixel[0]) + px;
        style.top = Math.min(startPixel[1], endPixel[1]) + px;
        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    }
    /**
   * @param {import("../Map.js").default|null} map Map.
   */ setMap(map) {
        if (this.map_) {
            this.map_.getOverlayContainer().removeChild(this.element_);
            const style = this.element_.style;
            style.left = 'inherit';
            style.top = 'inherit';
            style.width = 'inherit';
            style.height = 'inherit';
        }
        this.map_ = map;
        if (this.map_) {
            this.map_.getOverlayContainer().appendChild(this.element_);
        }
    }
    /**
   * @param {import("../pixel.js").Pixel} startPixel Start pixel.
   * @param {import("../pixel.js").Pixel} endPixel End pixel.
   */ setPixels(startPixel, endPixel) {
        this.startPixel_ = startPixel;
        this.endPixel_ = endPixel;
        this.createOrUpdateGeometry();
        this.render_();
    }
    /**
   * Creates or updates the cached geometry.
   */ createOrUpdateGeometry() {
        if (!this.map_) {
            return;
        }
        const startPixel = this.startPixel_;
        const endPixel = this.endPixel_;
        const pixels = [
            startPixel,
            [
                startPixel[0],
                endPixel[1]
            ],
            endPixel,
            [
                endPixel[0],
                startPixel[1]
            ]
        ];
        const coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
        // close the polygon
        coordinates[4] = coordinates[0].slice();
        if (!this.geometry_) {
            this.geometry_ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$Polygon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]([
                coordinates
            ]);
        } else {
            this.geometry_.setCoordinates([
                coordinates
            ]);
        }
    }
    /**
   * @return {import("../geom/Polygon.js").default} Geometry.
   */ getGeometry() {
        return this.geometry_;
    }
}
const __TURBOPACK__default__export__ = RenderBox;
}),
"[project]/node_modules/ol/render/EventType.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/EventType
 */ /**
 * @enum {string}
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
const __TURBOPACK__default__export__ = {
    /**
   * Triggered before a layer is rendered.
   * @event module:ol/render/Event~RenderEvent#prerender
   * @api
   */ PRERENDER: 'prerender',
    /**
   * Triggered after a layer is rendered.
   * @event module:ol/render/Event~RenderEvent#postrender
   * @api
   */ POSTRENDER: 'postrender',
    /**
   * Triggered before layers are composed.  When dispatched by the map, the event object will not have
   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
   * WebGL layers currently dispatch this event.
   * @event module:ol/render/Event~RenderEvent#precompose
   * @api
   */ PRECOMPOSE: 'precompose',
    /**
   * Triggered after layers are composed.  When dispatched by the map, the event object will not have
   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
   * WebGL layers currently dispatch this event.
   * @event module:ol/render/Event~RenderEvent#postcompose
   * @api
   */ POSTCOMPOSE: 'postcompose',
    /**
   * Triggered when rendering is complete, i.e. all sources and tiles have
   * finished loading for the current viewport, and all tiles are faded in.
   * The event object will not have a `context` set.
   * @event module:ol/render/Event~RenderEvent#rendercomplete
   * @api
   */ RENDERCOMPLETE: 'rendercomplete'
};
 /**
 * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes
 */  /**
 * @typedef {'postrender'|'prerender'} LayerRenderEventTypes
 */ }),
"[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas
 */ __turbopack_context__.s([
    "checkedFonts",
    ()=>checkedFonts,
    "defaultFillStyle",
    ()=>defaultFillStyle,
    "defaultFont",
    ()=>defaultFont,
    "defaultLineCap",
    ()=>defaultLineCap,
    "defaultLineDash",
    ()=>defaultLineDash,
    "defaultLineDashOffset",
    ()=>defaultLineDashOffset,
    "defaultLineJoin",
    ()=>defaultLineJoin,
    "defaultLineWidth",
    ()=>defaultLineWidth,
    "defaultMiterLimit",
    ()=>defaultMiterLimit,
    "defaultPadding",
    ()=>defaultPadding,
    "defaultStrokeStyle",
    ()=>defaultStrokeStyle,
    "defaultTextAlign",
    ()=>defaultTextAlign,
    "defaultTextBaseline",
    ()=>defaultTextBaseline,
    "drawImageOrLabel",
    ()=>drawImageOrLabel,
    "getTextDimensions",
    ()=>getTextDimensions,
    "measureAndCacheTextWidth",
    ()=>measureAndCacheTextWidth,
    "measureTextHeight",
    ()=>measureTextHeight,
    "measureTextWidth",
    ()=>measureTextWidth,
    "registerFont",
    ()=>registerFont,
    "rotateAtOffset",
    ()=>rotateAtOffset,
    "textHeights",
    ()=>textHeights
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/Object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/css.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$has$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/has.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$obj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/obj.js [app-ssr] (ecmascript)");
;
;
;
;
;
const defaultFont = '10px sans-serif';
const defaultFillStyle = '#000';
const defaultLineCap = 'round';
const defaultLineDash = [];
const defaultLineDashOffset = 0;
const defaultLineJoin = 'round';
const defaultMiterLimit = 10;
const defaultStrokeStyle = '#000';
const defaultTextAlign = 'center';
const defaultTextBaseline = 'middle';
const defaultPadding = [
    0,
    0,
    0,
    0
];
const defaultLineWidth = 1;
const checkedFonts = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
/**
 * @type {CanvasRenderingContext2D}
 */ let measureContext = null;
/**
 * @type {string}
 */ let measureFont;
const textHeights = {};
const genericFontFamilies = new Set([
    'serif',
    'sans-serif',
    'monospace',
    'cursive',
    'fantasy',
    'system-ui',
    'ui-serif',
    'ui-sans-serif',
    'ui-monospace',
    'ui-rounded',
    'emoji',
    'math',
    'fangsong'
]);
/**
 * @param {string} style Css font-style
 * @param {string} weight Css font-weight
 * @param {string} family Css font-family
 * @return {string} Font key.
 */ function getFontKey(style, weight, family) {
    return `${style} ${weight} 16px "${family}"`;
}
const registerFont = function() {
    const retries = 100;
    let timeout, fontFaceSet;
    /**
   * @param {string} fontSpec Css font spec
   * @return {Promise<boolean>} Font with style and weight is available
   */ async function isAvailable(fontSpec) {
        await fontFaceSet.ready;
        const fontFaces = await fontFaceSet.load(fontSpec);
        if (fontFaces.length === 0) {
            return false;
        }
        const font = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFontParameters"])(fontSpec);
        const checkFamily = font.families[0].toLowerCase();
        const checkWeight = font.weight;
        return fontFaces.some(/**
       * @param {import('../css.js').FontParameters} f Font.
       * @return {boolean} Font matches.
       */ (f)=>{
            const family = f.family.replace(/^['"]|['"]$/g, '').toLowerCase();
            const weight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fontWeights"][f.weight] || f.weight;
            return family === checkFamily && f.style === font.style && weight == checkWeight;
        });
    }
    async function check() {
        await fontFaceSet.ready;
        let done = true;
        const checkedFontsProperties = checkedFonts.getProperties();
        const fonts = Object.keys(checkedFontsProperties).filter((key)=>checkedFontsProperties[key] < retries);
        for(let i = fonts.length - 1; i >= 0; --i){
            const font = fonts[i];
            let currentRetries = checkedFontsProperties[font];
            if (currentRetries < retries) {
                if (await isAvailable(font)) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$obj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clear"])(textHeights);
                    checkedFonts.set(font, retries);
                } else {
                    currentRetries += 10;
                    checkedFonts.set(font, currentRetries, true);
                    if (currentRetries < retries) {
                        done = false;
                    }
                }
            }
        }
        timeout = undefined;
        if (!done) {
            timeout = setTimeout(check, 100);
        }
    }
    return async function(fontSpec) {
        if (!fontFaceSet) {
            fontFaceSet = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$has$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WORKER_OFFSCREEN_CANVAS"] ? self.fonts : document.fonts;
        }
        const font = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFontParameters"])(fontSpec);
        if (!font) {
            return;
        }
        const families = font.families;
        let needCheck = false;
        for (const family of families){
            if (genericFontFamilies.has(family)) {
                continue;
            }
            const key = getFontKey(font.style, font.weight, family);
            if (checkedFonts.get(key) !== undefined) {
                continue;
            }
            checkedFonts.set(key, 0, true);
            needCheck = true;
        }
        if (needCheck) {
            clearTimeout(timeout);
            timeout = setTimeout(check, 100);
        }
    };
}();
const measureTextHeight = function() {
    /**
   * @type {HTMLDivElement}
   */ let measureElement;
    return function(fontSpec) {
        let height = textHeights[fontSpec];
        if (height == undefined) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$has$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WORKER_OFFSCREEN_CANVAS"]) {
                const font = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$css$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFontParameters"])(fontSpec);
                const metrics = measureText(fontSpec, 'Žg');
                const lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);
                height = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
            } else {
                if (!measureElement) {
                    measureElement = document.createElement('div');
                    measureElement.innerHTML = 'M';
                    measureElement.style.minHeight = '0';
                    measureElement.style.maxHeight = 'none';
                    measureElement.style.height = 'auto';
                    measureElement.style.padding = '0';
                    measureElement.style.border = 'none';
                    measureElement.style.position = 'absolute';
                    measureElement.style.display = 'block';
                    measureElement.style.left = '-99999px';
                }
                measureElement.style.font = fontSpec;
                document.body.appendChild(measureElement);
                height = measureElement.offsetHeight;
                document.body.removeChild(measureElement);
            }
            textHeights[fontSpec] = height;
        }
        return height;
    };
}();
/**
 * @param {string} font Font.
 * @param {string} text Text.
 * @return {TextMetrics} Text metrics.
 */ function measureText(font, text) {
    if (!measureContext) {
        measureContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])(1, 1);
    }
    if (font != measureFont) {
        measureContext.font = font;
        measureFont = measureContext.font;
    }
    return measureContext.measureText(text);
}
function measureTextWidth(font, text) {
    return measureText(font, text).width;
}
function measureAndCacheTextWidth(font, text, cache) {
    if (text in cache) {
        return cache[text];
    }
    const width = text.split('\n').reduce((prev, curr)=>Math.max(prev, measureTextWidth(font, curr)), 0);
    cache[text] = width;
    return width;
}
function getTextDimensions(baseStyle, chunks) {
    const widths = [];
    const heights = [];
    const lineWidths = [];
    let width = 0;
    let lineWidth = 0;
    let height = 0;
    let lineHeight = 0;
    for(let i = 0, ii = chunks.length; i <= ii; i += 2){
        const text = chunks[i];
        if (text === '\n' || i === ii) {
            width = Math.max(width, lineWidth);
            lineWidths.push(lineWidth);
            lineWidth = 0;
            height += lineHeight;
            lineHeight = 0;
            continue;
        }
        const font = chunks[i + 1] || baseStyle.font;
        const currentWidth = measureTextWidth(font, text);
        widths.push(currentWidth);
        lineWidth += currentWidth;
        const currentHeight = measureTextHeight(font);
        heights.push(currentHeight);
        lineHeight = Math.max(lineHeight, currentHeight);
    }
    return {
        width,
        height,
        widths,
        heights,
        lineWidths
    };
}
function rotateAtOffset(context, rotation, offsetX, offsetY) {
    if (rotation !== 0) {
        context.translate(offsetX, offsetY);
        context.rotate(rotation);
        context.translate(-offsetX, -offsetY);
    }
}
function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {
    context.save();
    if (opacity !== 1) {
        if (context.globalAlpha === undefined) {
            context.globalAlpha = (context)=>context.globalAlpha *= opacity;
        } else {
            context.globalAlpha *= opacity;
        }
    }
    if (transform) {
        context.transform.apply(context, transform);
    }
    if (/** @type {*} */ labelOrImage.contextInstructions) {
        // label
        context.translate(x, y);
        context.scale(scale[0], scale[1]);
        executeLabelInstructions(labelOrImage, context);
    } else if (scale[0] < 0 || scale[1] < 0) {
        // flipped image
        context.translate(x, y);
        context.scale(scale[0], scale[1]);
        context.drawImage(labelOrImage, originX, originY, w, h, 0, 0, w, h);
    } else {
        // if image not flipped translate and scale can be avoided
        context.drawImage(labelOrImage, originX, originY, w, h, x, y, w * scale[0], h * scale[1]);
    }
    context.restore();
}
/**
 * @param {Label} label Label.
 * @param {CanvasRenderingContext2D} context Context.
 */ function executeLabelInstructions(label, context) {
    const contextInstructions = label.contextInstructions;
    for(let i = 0, ii = contextInstructions.length; i < ii; i += 2){
        if (Array.isArray(contextInstructions[i + 1])) {
            context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);
        } else {
            context[contextInstructions[i]] = contextInstructions[i + 1];
        }
    }
}
}),
"[project]/node_modules/ol/render/canvas/style.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/style
 */ __turbopack_context__.s([
    "buildRuleSet",
    ()=>buildRuleSet,
    "buildStyle",
    ()=>buildStyle,
    "flatStylesToStyleFunction",
    ()=>flatStylesToStyleFunction,
    "rulesToStyleFunction",
    ()=>rulesToStyleFunction
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/color.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/expr/cpu.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/expr/expression.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$obj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/obj.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$size$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/size.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Circle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Circle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Fill$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Fill.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Icon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Icon.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$RegularShape$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/RegularShape.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Stroke$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Stroke.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Style$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Style.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Text.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @fileoverview This module includes functions to build styles for the canvas renderer.  Building
 * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression
 * and returns an instance of one of the expression classes.  The compiling step takes the
 * expression instance and returns a function that can be evaluated to return a literal value.  The
 * evaluator function should do as little allocation and work as possible.
 */ /**
 * @typedef {import("../../style/flat.js").FlatStyle} FlatStyle
 */ /**
 * @typedef {import("../../expr/expression.js").EncodedExpression} EncodedExpression
 */ /**
 * @typedef {import("../../expr/expression.js").ParsingContext} ParsingContext
 */ /**
 * @typedef {import("../../expr/expression.js").CallExpression} CallExpression
 */ /**
 * @typedef {import("../../expr/cpu.js").EvaluationContext} EvaluationContext
 */ /**
 * @typedef {import("../../expr/cpu.js").ExpressionEvaluator} ExpressionEvaluator
 */ /**
 * @param {EvaluationContext} context The evaluation context.
 * @return {boolean} Always true.
 */ function always(context) {
    return true;
}
function rulesToStyleFunction(rules) {
    const parsingContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["newParsingContext"])();
    const evaluator = buildRuleSet(rules, parsingContext);
    const evaluationContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["newEvaluationContext"])();
    return function(feature, resolution) {
        evaluationContext.properties = feature.getPropertiesInternal();
        evaluationContext.resolution = resolution;
        if (parsingContext.featureId) {
            const id = feature.getId();
            if (id !== undefined) {
                evaluationContext.featureId = id;
            } else {
                evaluationContext.featureId = null;
            }
        }
        if (parsingContext.geometryType) {
            evaluationContext.geometryType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["computeGeometryType"])(feature.getGeometry());
        }
        return evaluator(evaluationContext);
    };
}
function flatStylesToStyleFunction(flatStyles) {
    const parsingContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["newParsingContext"])();
    const length = flatStyles.length;
    /**
   * @type {Array<StyleEvaluator>}
   */ const evaluators = new Array(length);
    for(let i = 0; i < length; ++i){
        evaluators[i] = buildStyle(flatStyles[i], parsingContext);
    }
    const evaluationContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["newEvaluationContext"])();
    /**
   * @type {Array<Style>}
   */ const styles = new Array(length);
    return function(feature, resolution) {
        evaluationContext.properties = feature.getPropertiesInternal();
        evaluationContext.resolution = resolution;
        if (parsingContext.featureId) {
            const id = feature.getId();
            if (id !== undefined) {
                evaluationContext.featureId = id;
            } else {
                evaluationContext.featureId = null;
            }
        }
        let nonNullCount = 0;
        for(let i = 0; i < length; ++i){
            const style = evaluators[i](evaluationContext);
            if (style) {
                styles[nonNullCount] = style;
                nonNullCount += 1;
            }
        }
        styles.length = nonNullCount;
        return styles;
    };
}
function buildRuleSet(rules, context) {
    const length = rules.length;
    /**
   * @type {Array<CompiledRule>}
   */ const compiledRules = new Array(length);
    for(let i = 0; i < length; ++i){
        const rule = rules[i];
        const filter = 'filter' in rule ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(rule.filter, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BooleanType"], context) : always;
        /**
     * @type {Array<StyleEvaluator>}
     */ let styles;
        if (Array.isArray(rule.style)) {
            const styleLength = rule.style.length;
            styles = new Array(styleLength);
            for(let j = 0; j < styleLength; ++j){
                styles[j] = buildStyle(rule.style[j], context);
            }
        } else {
            styles = [
                buildStyle(rule.style, context)
            ];
        }
        compiledRules[i] = {
            filter,
            styles
        };
    }
    return function(context) {
        /**
     * @type {Array<Style>}
     */ const styles = [];
        let someMatched = false;
        for(let i = 0; i < length; ++i){
            const filterEvaluator = compiledRules[i].filter;
            if (!filterEvaluator(context)) {
                continue;
            }
            if (rules[i].else && someMatched) {
                continue;
            }
            someMatched = true;
            for (const styleEvaluator of compiledRules[i].styles){
                const style = styleEvaluator(context);
                if (!style) {
                    continue;
                }
                styles.push(style);
            }
        }
        return styles;
    };
}
function buildStyle(flatStyle, context) {
    const evaluateFill = buildFill(flatStyle, '', context);
    const evaluateStroke = buildStroke(flatStyle, '', context);
    const evaluateText = buildText(flatStyle, context);
    const evaluateImage = buildImage(flatStyle, context);
    const evaluateZIndex = numberEvaluator(flatStyle, 'z-index', context);
    if (!evaluateFill && !evaluateStroke && !evaluateText && !evaluateImage && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$obj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmpty"])(flatStyle)) {
        // assume this is a user error
        // would be nice to check the properties and suggest "did you mean..."
        throw new Error('No fill, stroke, point, or text symbolizer properties in style: ' + JSON.stringify(flatStyle));
    }
    const style = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Style$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
    return function(context) {
        let empty = true;
        if (evaluateFill) {
            const fill = evaluateFill(context);
            if (fill) {
                empty = false;
            }
            style.setFill(fill);
        }
        if (evaluateStroke) {
            const stroke = evaluateStroke(context);
            if (stroke) {
                empty = false;
            }
            style.setStroke(stroke);
        }
        if (evaluateText) {
            const text = evaluateText(context);
            if (text) {
                empty = false;
            }
            style.setText(text);
        }
        if (evaluateImage) {
            const image = evaluateImage(context);
            if (image) {
                empty = false;
            }
            style.setImage(image);
        }
        if (evaluateZIndex) {
            style.setZIndex(evaluateZIndex(context));
        }
        if (empty) {
            return null;
        }
        return style;
    };
}
/**
 * @typedef {function(EvaluationContext):Fill|null} FillEvaluator
 */ /**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} prefix The property prefix.
 * @param {ParsingContext} context The parsing context.
 * @return {FillEvaluator?} A function that evaluates to a fill.
 */ function buildFill(flatStyle, prefix, context) {
    let evaluateColor;
    if (prefix + 'fill-pattern-src' in flatStyle) {
        evaluateColor = patternEvaluator(flatStyle, prefix + 'fill-', context);
    } else {
        if (flatStyle[prefix + 'fill-color'] === 'none') {
            // avoids hit detection
            return (context)=>null;
        }
        evaluateColor = colorLikeEvaluator(flatStyle, prefix + 'fill-color', context);
    }
    if (!evaluateColor) {
        return null;
    }
    const fill = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Fill$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
    return function(context) {
        const color = evaluateColor(context);
        if (color === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NO_COLOR"]) {
            return null;
        }
        fill.setColor(color);
        return fill;
    };
}
/**
 * @typedef {function(EvaluationContext):Stroke|null} StrokeEvaluator
 */ /**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} prefix The property prefix.
 * @param {ParsingContext} context The parsing context.
 * @return {StrokeEvaluator?} A function the evaluates to a stroke.
 */ function buildStroke(flatStyle, prefix, context) {
    const evaluateWidth = numberEvaluator(flatStyle, prefix + 'stroke-width', context);
    const evaluateColor = colorLikeEvaluator(flatStyle, prefix + 'stroke-color', context);
    if (!evaluateWidth && !evaluateColor) {
        return null;
    }
    const evaluateLineCap = stringEvaluator(flatStyle, prefix + 'stroke-line-cap', context);
    const evaluateLineJoin = stringEvaluator(flatStyle, prefix + 'stroke-line-join', context);
    const evaluateLineDash = numberArrayEvaluator(flatStyle, prefix + 'stroke-line-dash', context);
    const evaluateLineDashOffset = numberEvaluator(flatStyle, prefix + 'stroke-line-dash-offset', context);
    const evaluateMiterLimit = numberEvaluator(flatStyle, prefix + 'stroke-miter-limit', context);
    const stroke = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Stroke$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
    return function(context) {
        if (evaluateColor) {
            const color = evaluateColor(context);
            if (color === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$color$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NO_COLOR"]) {
                return null;
            }
            stroke.setColor(color);
        }
        if (evaluateWidth) {
            stroke.setWidth(evaluateWidth(context));
        }
        if (evaluateLineCap) {
            const lineCap = evaluateLineCap(context);
            if (lineCap !== 'butt' && lineCap !== 'round' && lineCap !== 'square') {
                throw new Error('Expected butt, round, or square line cap');
            }
            stroke.setLineCap(lineCap);
        }
        if (evaluateLineJoin) {
            const lineJoin = evaluateLineJoin(context);
            if (lineJoin !== 'bevel' && lineJoin !== 'round' && lineJoin !== 'miter') {
                throw new Error('Expected bevel, round, or miter line join');
            }
            stroke.setLineJoin(lineJoin);
        }
        if (evaluateLineDash) {
            stroke.setLineDash(evaluateLineDash(context));
        }
        if (evaluateLineDashOffset) {
            stroke.setLineDashOffset(evaluateLineDashOffset(context));
        }
        if (evaluateMiterLimit) {
            stroke.setMiterLimit(evaluateMiterLimit(context));
        }
        return stroke;
    };
}
/**
 * @typedef {function(EvaluationContext):Text} TextEvaluator
 */ /**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {ParsingContext} context The parsing context.
 * @return {TextEvaluator?} A function that evaluates to a text symbolizer.
 */ function buildText(flatStyle, context) {
    const prefix = 'text-';
    // Currently, an Array<string> may be used for rich text support.  This doesn't
    // work with our expression syntax where arrays of strings are interpreted as
    // call expressions.  To support rich text, we could add a 'strings' operator
    // where all the following arguments would be string values.
    const evaluateValue = stringEvaluator(flatStyle, prefix + 'value', context);
    if (!evaluateValue) {
        return null;
    }
    const evaluateFill = buildFill(flatStyle, prefix, context);
    const evaluateBackgroundFill = buildFill(flatStyle, prefix + 'background-', context);
    const evaluateStroke = buildStroke(flatStyle, prefix, context);
    const evaluateBackgroundStroke = buildStroke(flatStyle, prefix + 'background-', context);
    const evaluateFont = stringEvaluator(flatStyle, prefix + 'font', context);
    const evaluateMaxAngle = numberEvaluator(flatStyle, prefix + 'max-angle', context);
    const evaluateOffsetX = numberEvaluator(flatStyle, prefix + 'offset-x', context);
    const evaluateOffsetY = numberEvaluator(flatStyle, prefix + 'offset-y', context);
    const evaluateOverflow = booleanEvaluator(flatStyle, prefix + 'overflow', context);
    const evaluatePlacement = stringEvaluator(flatStyle, prefix + 'placement', context);
    const evaluateRepeat = numberEvaluator(flatStyle, prefix + 'repeat', context);
    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);
    const evaluateRotateWithView = booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);
    const evaluateRotation = numberEvaluator(flatStyle, prefix + 'rotation', context);
    const evaluateAlign = stringEvaluator(flatStyle, prefix + 'align', context);
    const evaluateJustify = stringEvaluator(flatStyle, prefix + 'justify', context);
    const evaluateBaseline = stringEvaluator(flatStyle, prefix + 'baseline', context);
    const evaluateKeepUpright = booleanEvaluator(flatStyle, prefix + 'keep-upright', context);
    const evaluatePadding = numberArrayEvaluator(flatStyle, prefix + 'padding', context);
    // The following properties are not currently settable
    const declutterMode = optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');
    const text = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Text$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
        declutterMode
    });
    return function(context) {
        text.setText(evaluateValue(context));
        if (evaluateFill) {
            text.setFill(evaluateFill(context));
        }
        if (evaluateBackgroundFill) {
            text.setBackgroundFill(evaluateBackgroundFill(context));
        }
        if (evaluateStroke) {
            text.setStroke(evaluateStroke(context));
        }
        if (evaluateBackgroundStroke) {
            text.setBackgroundStroke(evaluateBackgroundStroke(context));
        }
        if (evaluateFont) {
            text.setFont(evaluateFont(context));
        }
        if (evaluateMaxAngle) {
            text.setMaxAngle(evaluateMaxAngle(context));
        }
        if (evaluateOffsetX) {
            text.setOffsetX(evaluateOffsetX(context));
        }
        if (evaluateOffsetY) {
            text.setOffsetY(evaluateOffsetY(context));
        }
        if (evaluateOverflow) {
            text.setOverflow(evaluateOverflow(context));
        }
        if (evaluatePlacement) {
            const placement = evaluatePlacement(context);
            if (placement !== 'point' && placement !== 'line') {
                throw new Error('Expected point or line for text-placement');
            }
            text.setPlacement(placement);
        }
        if (evaluateRepeat) {
            text.setRepeat(evaluateRepeat(context));
        }
        if (evaluateScale) {
            text.setScale(evaluateScale(context));
        }
        if (evaluateRotateWithView) {
            text.setRotateWithView(evaluateRotateWithView(context));
        }
        if (evaluateRotation) {
            text.setRotation(evaluateRotation(context));
        }
        if (evaluateAlign) {
            const textAlign = evaluateAlign(context);
            if (textAlign !== 'left' && textAlign !== 'center' && textAlign !== 'right' && textAlign !== 'end' && textAlign !== 'start') {
                throw new Error('Expected left, right, center, start, or end for text-align');
            }
            text.setTextAlign(textAlign);
        }
        if (evaluateJustify) {
            const justify = evaluateJustify(context);
            if (justify !== 'left' && justify !== 'right' && justify !== 'center') {
                throw new Error('Expected left, right, or center for text-justify');
            }
            text.setJustify(justify);
        }
        if (evaluateBaseline) {
            const textBaseline = evaluateBaseline(context);
            if (textBaseline !== 'bottom' && textBaseline !== 'top' && textBaseline !== 'middle' && textBaseline !== 'alphabetic' && textBaseline !== 'hanging') {
                throw new Error('Expected bottom, top, middle, alphabetic, or hanging for text-baseline');
            }
            text.setTextBaseline(textBaseline);
        }
        if (evaluatePadding) {
            text.setPadding(evaluatePadding(context));
        }
        if (evaluateKeepUpright) {
            text.setKeepUpright(evaluateKeepUpright(context));
        }
        return text;
    };
}
/**
 * @typedef {function(EvaluationContext):import("../../style/Image.js").default} ImageEvaluator
 */ /**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {ParsingContext} context The parsing context.
 * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.
 */ function buildImage(flatStyle, context) {
    if ('icon-src' in flatStyle) {
        return buildIcon(flatStyle, context);
    }
    if ('shape-points' in flatStyle) {
        return buildShape(flatStyle, context);
    }
    if ('circle-radius' in flatStyle) {
        return buildCircle(flatStyle, context);
    }
    return null;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {ParsingContext} context The parsing context.
 * @return {ImageEvaluator} A function that evaluates to an image symbolizer.
 */ function buildIcon(flatStyle, context) {
    const prefix = 'icon-';
    // required property
    const srcName = prefix + 'src';
    const src = requireString(flatStyle[srcName], srcName);
    // settable properties
    const evaluateAnchor = coordinateEvaluator(flatStyle, prefix + 'anchor', context);
    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);
    const evaluateOpacity = numberEvaluator(flatStyle, prefix + 'opacity', context);
    const evaluateDisplacement = coordinateEvaluator(flatStyle, prefix + 'displacement', context);
    const evaluateRotation = numberEvaluator(flatStyle, prefix + 'rotation', context);
    const evaluateRotateWithView = booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);
    // the remaining symbolizer properties are not currently settable
    const anchorOrigin = optionalIconOrigin(flatStyle, prefix + 'anchor-origin');
    const anchorXUnits = optionalIconAnchorUnits(flatStyle, prefix + 'anchor-x-units');
    const anchorYUnits = optionalIconAnchorUnits(flatStyle, prefix + 'anchor-y-units');
    const color = optionalColorLike(flatStyle, prefix + 'color');
    const crossOrigin = optionalString(flatStyle, prefix + 'cross-origin');
    const offset = optionalNumberArray(flatStyle, prefix + 'offset');
    const offsetOrigin = optionalIconOrigin(flatStyle, prefix + 'offset-origin');
    const width = optionalNumber(flatStyle, prefix + 'width');
    const height = optionalNumber(flatStyle, prefix + 'height');
    const size = optionalSize(flatStyle, prefix + 'size');
    const declutterMode = optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');
    const icon = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Icon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
        src,
        anchorOrigin,
        anchorXUnits,
        anchorYUnits,
        color,
        crossOrigin,
        offset,
        offsetOrigin,
        height,
        width,
        size,
        declutterMode
    });
    return function(context) {
        if (evaluateOpacity) {
            icon.setOpacity(evaluateOpacity(context));
        }
        if (evaluateDisplacement) {
            icon.setDisplacement(evaluateDisplacement(context));
        }
        if (evaluateRotation) {
            icon.setRotation(evaluateRotation(context));
        }
        if (evaluateRotateWithView) {
            icon.setRotateWithView(evaluateRotateWithView(context));
        }
        if (evaluateScale) {
            icon.setScale(evaluateScale(context));
        }
        if (evaluateAnchor) {
            icon.setAnchor(evaluateAnchor(context));
        }
        return icon;
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {ParsingContext} context The parsing context.
 * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.
 */ function buildShape(flatStyle, context) {
    const prefix = 'shape-';
    // required property
    const pointsName = prefix + 'points';
    const radiusName = prefix + 'radius';
    const points = requireNumber(flatStyle[pointsName], pointsName);
    const radius = requireNumber(flatStyle[radiusName], radiusName);
    // settable properties
    const evaluateFill = buildFill(flatStyle, prefix, context);
    const evaluateStroke = buildStroke(flatStyle, prefix, context);
    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);
    const evaluateDisplacement = coordinateEvaluator(flatStyle, prefix + 'displacement', context);
    const evaluateRotation = numberEvaluator(flatStyle, prefix + 'rotation', context);
    const evaluateRotateWithView = booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);
    // the remaining properties are not currently settable
    const radius2 = optionalNumber(flatStyle, prefix + 'radius2');
    const angle = optionalNumber(flatStyle, prefix + 'angle');
    const declutterMode = optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');
    const shape = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$RegularShape$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
        points,
        radius,
        radius2,
        angle,
        declutterMode
    });
    return function(context) {
        if (evaluateFill) {
            shape.setFill(evaluateFill(context));
        }
        if (evaluateStroke) {
            shape.setStroke(evaluateStroke(context));
        }
        if (evaluateDisplacement) {
            shape.setDisplacement(evaluateDisplacement(context));
        }
        if (evaluateRotation) {
            shape.setRotation(evaluateRotation(context));
        }
        if (evaluateRotateWithView) {
            shape.setRotateWithView(evaluateRotateWithView(context));
        }
        if (evaluateScale) {
            shape.setScale(evaluateScale(context));
        }
        return shape;
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {ParsingContext} context The parsing context.
 * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.
 */ function buildCircle(flatStyle, context) {
    const prefix = 'circle-';
    // settable properties
    const evaluateFill = buildFill(flatStyle, prefix, context);
    const evaluateStroke = buildStroke(flatStyle, prefix, context);
    const evaluateRadius = numberEvaluator(flatStyle, prefix + 'radius', context);
    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);
    const evaluateDisplacement = coordinateEvaluator(flatStyle, prefix + 'displacement', context);
    const evaluateRotation = numberEvaluator(flatStyle, prefix + 'rotation', context);
    const evaluateRotateWithView = booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);
    // the remaining properties are not currently settable
    const declutterMode = optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');
    const circle = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Circle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
        radius: 5,
        declutterMode
    });
    return function(context) {
        if (evaluateRadius) {
            circle.setRadius(evaluateRadius(context));
        }
        if (evaluateFill) {
            circle.setFill(evaluateFill(context));
        }
        if (evaluateStroke) {
            circle.setStroke(evaluateStroke(context));
        }
        if (evaluateDisplacement) {
            circle.setDisplacement(evaluateDisplacement(context));
        }
        if (evaluateRotation) {
            circle.setRotation(evaluateRotation(context));
        }
        if (evaluateRotateWithView) {
            circle.setRotateWithView(evaluateRotateWithView(context));
        }
        if (evaluateScale) {
            circle.setScale(evaluateScale(context));
        }
        return circle;
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.
 */ function numberEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return undefined;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NumberType"], context);
    return function(context) {
        return requireNumber(evaluator(context), name);
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.
 */ function stringEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StringType"], context);
    return function(context) {
        return requireString(evaluator(context), name);
    };
}
function patternEvaluator(flatStyle, prefix, context) {
    const srcEvaluator = stringEvaluator(flatStyle, prefix + 'pattern-src', context);
    const offsetEvaluator = sizeEvaluator(flatStyle, prefix + 'pattern-offset', context);
    const patternSizeEvaluator = sizeEvaluator(flatStyle, prefix + 'pattern-size', context);
    const colorEvaluator = colorLikeEvaluator(flatStyle, prefix + 'color', context);
    return function(context) {
        return {
            src: srcEvaluator(context),
            offset: offsetEvaluator && offsetEvaluator(context),
            size: patternSizeEvaluator && patternSizeEvaluator(context),
            color: colorEvaluator && colorEvaluator(context)
        };
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.
 */ function booleanEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BooleanType"], context);
    return function(context) {
        const value = evaluator(context);
        if (typeof value !== 'boolean') {
            throw new Error(`Expected a boolean for ${name}`);
        }
        return value;
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.
 */ function colorLikeEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ColorType"], context);
    return function(context) {
        return requireColorLike(evaluator(context), name);
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.
 */ function numberArrayEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NumberArrayType"], context);
    return function(context) {
        return requireNumberArray(evaluator(context), name);
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.
 */ function coordinateEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NumberArrayType"], context);
    return function(context) {
        const array = requireNumberArray(evaluator(context), name);
        if (array.length !== 2) {
            throw new Error(`Expected two numbers for ${name}`);
        }
        return array;
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').SizeEvaluator?} The expression evaluator.
 */ function sizeEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NumberArrayType"], context);
    return function(context) {
        return requireSize(evaluator(context), name);
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} name The property name.
 * @param {ParsingContext} context The parsing context.
 * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.
 */ function sizeLikeEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
        return null;
    }
    const evaluator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$cpu$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildExpression"])(flatStyle[name], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NumberArrayType"] | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$expr$2f$expression$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NumberType"], context);
    return function(context) {
        return requireSizeLike(evaluator(context), name);
    };
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {number|undefined} A number or undefined.
 */ function optionalNumber(flatStyle, property) {
    const value = flatStyle[property];
    if (value === undefined) {
        return undefined;
    }
    if (typeof value !== 'number') {
        throw new Error(`Expected a number for ${property}`);
    }
    return value;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {import("../../size.js").Size|undefined} A size or undefined.
 */ function optionalSize(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    if (typeof encoded === 'number') {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$size$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toSize"])(encoded);
    }
    if (!Array.isArray(encoded)) {
        throw new Error(`Expected a number or size array for ${property}`);
    }
    if (encoded.length !== 2 || typeof encoded[0] !== 'number' || typeof encoded[1] !== 'number') {
        throw new Error(`Expected a number or size array for ${property}`);
    }
    return encoded;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {string|undefined} A string or undefined.
 */ function optionalString(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    if (typeof encoded !== 'string') {
        throw new Error(`Expected a string for ${property}`);
    }
    return encoded;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {import("../../style/Icon.js").IconOrigin|undefined} An icon origin or undefined.
 */ function optionalIconOrigin(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    if (encoded !== 'bottom-left' && encoded !== 'bottom-right' && encoded !== 'top-left' && encoded !== 'top-right') {
        throw new Error(`Expected bottom-left, bottom-right, top-left, or top-right for ${property}`);
    }
    return encoded;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {import("../../style/Icon.js").IconAnchorUnits|undefined} Icon anchor units or undefined.
 */ function optionalIconAnchorUnits(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    if (encoded !== 'pixels' && encoded !== 'fraction') {
        throw new Error(`Expected pixels or fraction for ${property}`);
    }
    return encoded;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {Array<number>|undefined} An array of numbers or undefined.
 */ function optionalNumberArray(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    return requireNumberArray(encoded, property);
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {import('../../style/Style.js').DeclutterMode} Icon declutter mode.
 */ function optionalDeclutterMode(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    if (typeof encoded !== 'string') {
        throw new Error(`Expected a string for ${property}`);
    }
    if (encoded !== 'declutter' && encoded !== 'obstacle' && encoded !== 'none') {
        throw new Error(`Expected declutter, obstacle, or none for ${property}`);
    }
    return encoded;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} property The symbolizer property.
 * @return {string|Array<number>|undefined} A string or an array of color values or undefined.
 */ function optionalColorLike(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
        return undefined;
    }
    return requireColorLike(encoded, property);
}
/**
 * @param {any} value The value.
 * @param {string} property The property.
 * @return {Array<number>} An array of numbers.
 */ function requireNumberArray(value, property) {
    if (!Array.isArray(value)) {
        throw new Error(`Expected an array for ${property}`);
    }
    const length = value.length;
    for(let i = 0; i < length; ++i){
        if (typeof value[i] !== 'number') {
            throw new Error(`Expected an array of numbers for ${property}`);
        }
    }
    return value;
}
/**
 * @param {any} value The value.
 * @param {string} property The property.
 * @return {string} A string.
 */ function requireString(value, property) {
    if (typeof value !== 'string') {
        throw new Error(`Expected a string for ${property}`);
    }
    return value;
}
/**
 * @param {any} value The value.
 * @param {string} property The property.
 * @return {number} A number.
 */ function requireNumber(value, property) {
    if (typeof value !== 'number') {
        throw new Error(`Expected a number for ${property}`);
    }
    return value;
}
/**
 * @param {any} value The value.
 * @param {string} property The property.
 * @return {Array<number>|string} A color.
 */ function requireColorLike(value, property) {
    if (typeof value === 'string') {
        return value;
    }
    const array = requireNumberArray(value, property);
    const length = array.length;
    if (length < 3 || length > 4) {
        throw new Error(`Expected a color with 3 or 4 values for ${property}`);
    }
    return array;
}
/**
 * @param {any} value The value.
 * @param {string} property The property.
 * @return {Array<number>} A number or an array of two numbers.
 */ function requireSize(value, property) {
    const size = requireNumberArray(value, property);
    if (size.length !== 2) {
        throw new Error(`Expected an array of two numbers for ${property}`);
    }
    return size;
}
/**
 * @param {any} value The value.
 * @param {string} property The property.
 * @return {number|Array<number>} A number or an array of two numbers.
 */ function requireSizeLike(value, property) {
    if (typeof value === 'number') {
        return value;
    }
    return requireSize(value, property);
}
}),
"[project]/node_modules/ol/render/Event.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/Event
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2f$Event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/events/Event.js [app-ssr] (ecmascript)");
;
class RenderEvent extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$events$2f$Event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {import("./EventType.js").default} type Type.
   * @param {import("../transform.js").Transform} [inversePixelTransform] Transform for
   *     CSS pixels to rendered pixels.
   * @param {import("../Map.js").FrameState} [frameState] Frame state.
   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.
   */ constructor(type, inversePixelTransform, frameState, context){
        super(type);
        /**
     * Transform from CSS pixels (relative to the top-left corner of the map viewport)
     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.
     * @type {import("../transform.js").Transform|undefined}
     * @api
     */ this.inversePixelTransform = inversePixelTransform;
        /**
     * An object representing the current render frame state.
     * @type {import("../Map.js").FrameState|undefined}
     * @api
     */ this.frameState = frameState;
        /**
     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,
     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL
     * context.
     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}
     * @api
     */ this.context = context;
    }
}
const __TURBOPACK__default__export__ = RenderEvent;
}),
"[project]/node_modules/ol/render/canvas/ZIndexContext.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/ZIndexContext
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
;
/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */ /**
 * @extends {CanvasRenderingContext2D}
 */ class ZIndexContext {
    constructor(){
        /**
     * @private
     * @type {Array<Array<*>>}
     */ this.instructions_ = [];
        /**
     * @type {number}
     */ this.zIndex = 0;
        /**
     * @private
     * @type {number}
     */ this.offset_ = 0;
        /**
     * @private
     * @type {ZIndexContextProxy}
     */ this.context_ = new Proxy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSharedCanvasContext2D"])(), {
            get: (target, property)=>{
                if (typeof /** @type {*} */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSharedCanvasContext2D"])()[property] !== 'function') {
                    // we only accept calling functions on the proxy, not accessing properties
                    return undefined;
                }
                this.push_(property);
                return this.pushMethodArgs_;
            },
            set: (target, property, value)=>{
                this.push_(property, value);
                return true;
            }
        });
    }
    /**
   * @param {...*} args Arguments to push to the instructions array.
   * @private
   */ push_(...args) {
        const instructions = this.instructions_;
        const index = this.zIndex + this.offset_;
        if (!instructions[index]) {
            instructions[index] = [];
        }
        instructions[index].push(...args);
    }
    /**
   * @private
   * @param {...*} args Args.
   * @return {ZIndexContext} This.
   */ pushMethodArgs_ = (...args)=>{
        this.push_(args);
        return this;
    };
    /**
   * Push a function that renders to the context directly.
   * @param {function(CanvasRenderingContext2D): void} render Function.
   */ pushFunction(render) {
        this.push_(render);
    }
    /**
   * Get a proxy for CanvasRenderingContext2D which does not support getting state
   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a
   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,
   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.
   * @return {ZIndexContextProxy} Context.
   */ getContext() {
        return this.context_;
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   */ draw(context) {
        this.instructions_.forEach((instructionsAtIndex)=>{
            for(let i = 0, ii = instructionsAtIndex.length; i < ii; ++i){
                const property = instructionsAtIndex[i];
                if (typeof property === 'function') {
                    property(context);
                    continue;
                }
                const instructionAtIndex = instructionsAtIndex[++i];
                if (typeof /** @type {*} */ context[property] === 'function') {
                    /** @type {*} */ context[property](...instructionAtIndex);
                } else {
                    if (typeof instructionAtIndex === 'function') {
                        /** @type {*} */ context[property] = instructionAtIndex(context);
                        continue;
                    }
                    /** @type {*} */ context[property] = instructionAtIndex;
                }
            }
        });
    }
    clear() {
        this.instructions_.length = 0;
        this.zIndex = 0;
        this.offset_ = 0;
    }
    /**
   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to
   * avoid conflicting context.clip() or context.save()/restore() calls.
   */ offset() {
        this.offset_ = this.instructions_.length;
        this.zIndex = 0;
    }
}
const __TURBOPACK__default__export__ = ZIndexContext;
}),
"[project]/node_modules/ol/render/Feature.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/Feature
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__,
    "toFeature",
    ()=>toFeature,
    "toGeometry",
    ()=>toGeometry
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Feature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/Feature.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/functions.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$center$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/center.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$interiorpoint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/interiorpoint.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$interpolate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/interpolate.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$orient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/orient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$simplify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/simplify.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$LineString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__LineString$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/LineString.js [app-ssr] (ecmascript) <export default as LineString>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$MultiLineString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiLineString$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/MultiLineString.js [app-ssr] (ecmascript) <export default as MultiLineString>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$MultiPoint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiPoint$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/MultiPoint.js [app-ssr] (ecmascript) <export default as MultiPoint>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$MultiPolygon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiPolygon$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/MultiPolygon.js [app-ssr] (ecmascript) <export default as MultiPolygon>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$Point$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Point$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/Point.js [app-ssr] (ecmascript) <export default as Point>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$Polygon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Polygon$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/Polygon.js [app-ssr] (ecmascript) <export default as Polygon>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/proj.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type
 * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,
 * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.
 */ /**
 * @type {import("../transform.js").Transform}
 */ const tmpTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
/**
 * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
 * structure, optimized for vector tile rendering and styling. Geometry access
 * through the API is limited to getting the type and extent of the geometry.
 */ class RenderFeature {
    /**
   * @param {Type} type Geometry type.
   * @param {Array<number>} flatCoordinates Flat coordinates. These always need
   *     to be right-handed for polygons.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Object<string, *>} properties Properties.
   * @param {number|string|undefined} id Feature id.
   */ constructor(type, flatCoordinates, ends, stride, properties, id){
        /**
     * @type {import("../style/Style.js").StyleFunction|undefined}
     */ this.styleFunction;
        /**
     * @private
     * @type {import("../extent.js").Extent|undefined}
     */ this.extent_;
        /**
     * @private
     * @type {number|string|undefined}
     */ this.id_ = id;
        /**
     * @private
     * @type {Type}
     */ this.type_ = type;
        /**
     * @private
     * @type {Array<number>}
     */ this.flatCoordinates_ = flatCoordinates;
        /**
     * @private
     * @type {Array<number>}
     */ this.flatInteriorPoints_ = null;
        /**
     * @private
     * @type {Array<number>}
     */ this.flatMidpoints_ = null;
        /**
     * @private
     * @type {Array<number>|null}
     */ this.ends_ = ends || null;
        /**
     * @private
     * @type {Object<string, *>}
     */ this.properties_ = properties;
        /**
     * @private
     * @type {number}
     */ this.squaredTolerance_;
        /**
     * @private
     * @type {number}
     */ this.stride_ = stride;
        /**
     * @private
     * @type {RenderFeature}
     */ this.simplifiedGeometry_;
    }
    /**
   * Get a feature property by its key.
   * @param {string} key Key
   * @return {*} Value for the requested key.
   * @api
   */ get(key) {
        return this.properties_[key];
    }
    /**
   * Get the extent of this feature's geometry.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */ getExtent() {
        if (!this.extent_) {
            this.extent_ = this.type_ === 'Point' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createOrUpdateFromCoordinate"])(this.flatCoordinates_) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createOrUpdateFromFlatCoordinates"])(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);
        }
        return this.extent_;
    }
    /**
   * @return {Array<number>} Flat interior points.
   */ getFlatInteriorPoint() {
        if (!this.flatInteriorPoints_) {
            const flatCenter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCenter"])(this.getExtent());
            this.flatInteriorPoints_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$interiorpoint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getInteriorPointOfArray"])(this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);
        }
        return this.flatInteriorPoints_;
    }
    /**
   * @return {Array<number>} Flat interior points.
   */ getFlatInteriorPoints() {
        if (!this.flatInteriorPoints_) {
            const ends = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$orient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateEnds"])(this.flatCoordinates_, this.ends_);
            const flatCenters = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$center$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["linearRingss"])(this.flatCoordinates_, 0, ends, 2);
            this.flatInteriorPoints_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$interiorpoint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getInteriorPointsOfMultiArray"])(this.flatCoordinates_, 0, ends, 2, flatCenters);
        }
        return this.flatInteriorPoints_;
    }
    /**
   * @return {Array<number>} Flat midpoint.
   */ getFlatMidpoint() {
        if (!this.flatMidpoints_) {
            this.flatMidpoints_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$interpolate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["interpolatePoint"])(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
        }
        return this.flatMidpoints_;
    }
    /**
   * @return {Array<number>} Flat midpoints.
   */ getFlatMidpoints() {
        if (!this.flatMidpoints_) {
            this.flatMidpoints_ = [];
            const flatCoordinates = this.flatCoordinates_;
            let offset = 0;
            const ends = this.ends_;
            for(let i = 0, ii = ends.length; i < ii; ++i){
                const end = ends[i];
                const midpoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$interpolate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["interpolatePoint"])(flatCoordinates, offset, end, 2, 0.5);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["extend"])(this.flatMidpoints_, midpoint);
                offset = end;
            }
        }
        return this.flatMidpoints_;
    }
    /**
   * Get the feature identifier.  This is a stable identifier for the feature and
   * is set when reading data from a remote source.
   * @return {number|string|undefined} Id.
   * @api
   */ getId() {
        return this.id_;
    }
    /**
   * @return {Array<number>} Flat coordinates.
   */ getOrientedFlatCoordinates() {
        return this.flatCoordinates_;
    }
    /**
   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
   * determining the geometry type in style function (see {@link #getType}).
   * @return {RenderFeature} Feature.
   * @api
   */ getGeometry() {
        return this;
    }
    /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {RenderFeature} Simplified geometry.
   */ getSimplifiedGeometry(squaredTolerance) {
        return this;
    }
    /**
   * Get a transformed and simplified version of the geometry.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
   * @return {RenderFeature} Simplified geometry.
   */ simplifyTransformed(squaredTolerance, transform) {
        return this;
    }
    /**
   * Get the feature properties.
   * @return {Object<string, *>} Feature properties.
   * @api
   */ getProperties() {
        return this.properties_;
    }
    /**
   * Get an object of all property names and values.  This has the same behavior as getProperties,
   * but is here to conform with the {@link module:ol/Feature~Feature} interface.
   * @return {Object<string, *>?} Object.
   */ getPropertiesInternal() {
        return this.properties_;
    }
    /**
   * @return {number} Stride.
   */ getStride() {
        return this.stride_;
    }
    /**
   * @return {import('../style/Style.js').StyleFunction|undefined} Style
   */ getStyleFunction() {
        return this.styleFunction;
    }
    /**
   * Get the type of this feature's geometry.
   * @return {Type} Geometry type.
   * @api
   */ getType() {
        return this.type_;
    }
    /**
   * Transform geometry coordinates from tile pixel space to projected.
   *
   * @param {import("../proj.js").ProjectionLike} projection The data projection
   */ transform(projection) {
        projection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["get"])(projection);
        const pixelExtent = projection.getExtent();
        const projectedExtent = projection.getWorldExtent();
        if (pixelExtent && projectedExtent) {
            const scale = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getHeight"])(projectedExtent) / (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getHeight"])(pixelExtent);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transform2D"])(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);
        }
    }
    /**
   * Apply a transform function to the coordinates of the geometry.
   * The geometry is modified in place.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   * @param {import("../proj.js").TransformFunction} transformFn Transform function.
   */ applyTransform(transformFn) {
        transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);
    }
    /**
   * @return {RenderFeature} A cloned render feature.
   */ clone() {
        return new RenderFeature(this.type_, this.flatCoordinates_.slice(), this.ends_?.slice(), this.stride_, Object.assign({}, this.properties_), this.id_);
    }
    /**
   * @return {Array<number>|null} Ends.
   */ getEnds() {
        return this.ends_;
    }
    /**
   * Add transform and resolution based geometry simplification to this instance.
   * @return {RenderFeature} This render feature.
   */ enableSimplifyTransformed() {
        this.simplifyTransformed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["memoizeOne"])((squaredTolerance, transform)=>{
            if (squaredTolerance === this.squaredTolerance_) {
                return this.simplifiedGeometry_;
            }
            this.simplifiedGeometry_ = this.clone();
            if (transform) {
                this.simplifiedGeometry_.applyTransform(transform);
            }
            const simplifiedFlatCoordinates = this.simplifiedGeometry_.getFlatCoordinates();
            let simplifiedEnds;
            switch(this.type_){
                case 'LineString':
                    simplifiedFlatCoordinates.length = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$simplify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["douglasPeucker"])(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.flatCoordinates_.length, this.simplifiedGeometry_.stride_, squaredTolerance, simplifiedFlatCoordinates, 0);
                    simplifiedEnds = [
                        simplifiedFlatCoordinates.length
                    ];
                    break;
                case 'MultiLineString':
                    simplifiedEnds = [];
                    simplifiedFlatCoordinates.length = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$simplify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["douglasPeuckerArray"])(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
                    break;
                case 'Polygon':
                    simplifiedEnds = [];
                    simplifiedFlatCoordinates.length = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$simplify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["quantizeArray"])(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
                    break;
                default:
            }
            if (simplifiedEnds) {
                this.simplifiedGeometry_ = new RenderFeature(this.type_, simplifiedFlatCoordinates, simplifiedEnds, 2, this.properties_, this.id_);
            }
            this.squaredTolerance_ = squaredTolerance;
            return this.simplifiedGeometry_;
        });
        return this;
    }
}
/**
 * @return {Array<number>} Flat coordinates.
 */ RenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;
function toGeometry(renderFeature) {
    const geometryType = renderFeature.getType();
    switch(geometryType){
        case 'Point':
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$Point$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Point$3e$__["Point"](renderFeature.getFlatCoordinates());
        case 'MultiPoint':
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$MultiPoint$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiPoint$3e$__["MultiPoint"](renderFeature.getFlatCoordinates(), 'XY');
        case 'LineString':
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$LineString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__LineString$3e$__["LineString"](renderFeature.getFlatCoordinates(), 'XY');
        case 'MultiLineString':
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$MultiLineString$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiLineString$3e$__["MultiLineString"](renderFeature.getFlatCoordinates(), 'XY', renderFeature.getEnds());
        case 'Polygon':
            const flatCoordinates = renderFeature.getFlatCoordinates();
            const ends = renderFeature.getEnds();
            const endss = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$orient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateEnds"])(flatCoordinates, ends);
            return endss.length > 1 ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$MultiPolygon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiPolygon$3e$__["MultiPolygon"](flatCoordinates, 'XY', endss) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$Polygon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Polygon$3e$__["Polygon"](flatCoordinates, 'XY', ends);
        default:
            throw new Error('Invalid geometry type:' + geometryType);
    }
}
function toFeature(renderFeature, geometryName) {
    const id = renderFeature.getId();
    const geometry = toGeometry(renderFeature);
    const properties = renderFeature.getProperties();
    const feature = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$Feature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
    if (geometryName !== undefined) {
        feature.setGeometryName(geometryName);
    }
    feature.setGeometry(geometry);
    if (id !== undefined) {
        feature.setId(id);
    }
    feature.setProperties(properties, true);
    return feature;
}
const __TURBOPACK__default__export__ = RenderFeature;
}),
"[project]/node_modules/ol/render/VectorContext.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/VectorContext
 */ /**
 * @classdesc
 * Context for drawing geometries.  A vector context is available on render
 * events and does not need to be constructed directly.
 * @api
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
class VectorContext {
    /**
   * Render a geometry with a custom renderer.
   *
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {Function} renderer Renderer.
   * @param {Function} hitDetectionRenderer Renderer.
   * @param {number} [index] Render order index.
   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}
    /**
   * Render a geometry.
   *
   * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
   */ drawGeometry(geometry) {}
    /**
   * Set the rendering style.
   *
   * @param {import("../style/Style.js").default} style The rendering style.
   */ setStyle(style) {}
    /**
   * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */ drawCircle(circleGeometry, feature, index) {}
    /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} [index] Render order index.
   */ drawFeature(feature, style, index) {}
    /**
   * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */ drawGeometryCollection(geometryCollectionGeometry, feature, index) {}
    /**
   * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawLineString(lineStringGeometry, feature, index) {}
    /**
   * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawMultiLineString(multiLineStringGeometry, feature, index) {}
    /**
   * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawMultiPoint(multiPointGeometry, feature, index) {}
    /**
   * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawMultiPolygon(multiPolygonGeometry, feature, index) {}
    /**
   * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawPoint(pointGeometry, feature, index) {}
    /**
   * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawPolygon(polygonGeometry, feature, index) {}
    /**
   * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */ drawText(geometry, feature, index) {}
    /**
   * @param {import("../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
   */ setFillStrokeStyle(fillStyle, strokeStyle) {}
    /**
   * @param {import("../style/Image.js").default} imageStyle Image style.
   * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.
   */ setImageStyle(imageStyle, declutterImageWithText) {}
    /**
   * @param {import("../style/Text.js").default} textStyle Text style.
   * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.
   */ setTextStyle(textStyle, declutterImageWithText) {}
}
const __TURBOPACK__default__export__ = VectorContext;
}),
"[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/Instruction
 */ /**
 * @enum {number}
 */ __turbopack_context__.s([
    "beginPathInstruction",
    ()=>beginPathInstruction,
    "closePathInstruction",
    ()=>closePathInstruction,
    "default",
    ()=>__TURBOPACK__default__export__,
    "fillInstruction",
    ()=>fillInstruction,
    "strokeInstruction",
    ()=>strokeInstruction
]);
const Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12
};
const fillInstruction = [
    Instruction.FILL
];
const strokeInstruction = [
    Instruction.STROKE
];
const beginPathInstruction = [
    Instruction.BEGIN_PATH
];
const closePathInstruction = [
    Instruction.CLOSE_PATH
];
const __TURBOPACK__default__export__ = Instruction;
}),
"[project]/node_modules/ol/render/canvas/Builder.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/Builder
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/colorlike.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2f$Relationship$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent/Relationship.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/inflate.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$VectorContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/VectorContext.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
class CanvasBuilder extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$VectorContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super();
        /**
     * @protected
     * @type {number}
     */ this.tolerance = tolerance;
        /**
     * @protected
     * @const
     * @type {import("../../extent.js").Extent}
     */ this.maxExtent = maxExtent;
        /**
     * @protected
     * @type {number}
     */ this.pixelRatio = pixelRatio;
        /**
     * @protected
     * @type {number}
     */ this.maxLineWidth = 0;
        /**
     * @protected
     * @const
     * @type {number}
     */ this.resolution = resolution;
        /**
     * @private
     * @type {Array<*>}
     */ this.beginGeometryInstruction1_ = null;
        /**
     * @private
     * @type {Array<*>}
     */ this.beginGeometryInstruction2_ = null;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.bufferedMaxExtent_ = null;
        /**
     * @protected
     * @type {Array<*>}
     */ this.instructions = [];
        /**
     * @protected
     * @type {Array<number>}
     */ this.coordinates = [];
        /**
     * @private
     * @type {import("../../coordinate.js").Coordinate}
     */ this.tmpCoordinate_ = [];
        /**
     * @protected
     * @type {Array<*>}
     */ this.hitDetectionInstructions = [];
        /**
     * @protected
     * @type {import("../canvas.js").FillStrokeState}
     */ this.state = {};
    }
    /**
   * @protected
   * @param {Array<number>} dashArray Dash array.
   * @return {Array<number>} Dash array with pixel ratio applied
   */ applyPixelRatio(dashArray) {
        const pixelRatio = this.pixelRatio;
        return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
            return dash * pixelRatio;
        });
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} stride Stride.
   * @protected
   * @return {number} My end
   */ appendFlatPointCoordinates(flatCoordinates, stride) {
        const extent = this.getBufferedMaxExtent();
        const tmpCoord = this.tmpCoordinate_;
        const coordinates = this.coordinates;
        let myEnd = coordinates.length;
        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){
            tmpCoord[0] = flatCoordinates[i];
            tmpCoord[1] = flatCoordinates[i + 1];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCoordinate"])(extent, tmpCoord)) {
                coordinates[myEnd++] = tmpCoord[0];
                coordinates[myEnd++] = tmpCoord[1];
            }
        }
        return myEnd;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {boolean} closed Last input coordinate equals first.
   * @param {boolean} skipFirst Skip first coordinate.
   * @protected
   * @return {number} My end.
   */ appendFlatLineCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {
        const coordinates = this.coordinates;
        let myEnd = coordinates.length;
        const extent = this.getBufferedMaxExtent();
        if (skipFirst) {
            offset += stride;
        }
        let lastXCoord = flatCoordinates[offset];
        let lastYCoord = flatCoordinates[offset + 1];
        const nextCoord = this.tmpCoordinate_;
        let skipped = true;
        let i, lastRel, nextRel;
        for(i = offset + stride; i < end; i += stride){
            nextCoord[0] = flatCoordinates[i];
            nextCoord[1] = flatCoordinates[i + 1];
            nextRel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["coordinateRelationship"])(extent, nextCoord);
            if (nextRel !== lastRel) {
                if (skipped) {
                    coordinates[myEnd++] = lastXCoord;
                    coordinates[myEnd++] = lastYCoord;
                    skipped = false;
                }
                coordinates[myEnd++] = nextCoord[0];
                coordinates[myEnd++] = nextCoord[1];
            } else if (nextRel === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2f$Relationship$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].INTERSECTING) {
                coordinates[myEnd++] = nextCoord[0];
                coordinates[myEnd++] = nextCoord[1];
                skipped = false;
            } else {
                skipped = true;
            }
            lastXCoord = nextCoord[0];
            lastYCoord = nextCoord[1];
            lastRel = nextRel;
        }
        // Last coordinate equals first or only one point to append:
        if (closed && skipped || i === offset + stride) {
            coordinates[myEnd++] = lastXCoord;
            coordinates[myEnd++] = lastYCoord;
        }
        return myEnd;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} builderEnds Builder ends.
   * @return {number} Offset.
   */ drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {
        for(let i = 0, ii = ends.length; i < ii; ++i){
            const end = ends[i];
            const builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
            builderEnds.push(builderEnd);
            offset = end;
        }
        return offset;
    }
    /**
   * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {Function} renderer Renderer.
   * @param {Function} hitDetectionRenderer Renderer.
   * @param {number} [index] Render order index.
   * @override
   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {
        this.beginGeometry(geometry, feature, index);
        const type = geometry.getType();
        const stride = geometry.getStride();
        const builderBegin = this.coordinates.length;
        let flatCoordinates, builderEnd, builderEnds, builderEndss;
        let offset;
        switch(type){
            case 'MultiPolygon':
                flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getOrientedFlatCoordinates();
                builderEndss = [];
                const endss = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getEndss();
                offset = 0;
                for(let i = 0, ii = endss.length; i < ii; ++i){
                    const myEnds = [];
                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
                    builderEndss.push(myEnds);
                }
                this.instructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    renderer,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateMultiCoordinatesArray"],
                    index
                ]);
                this.hitDetectionInstructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    hitDetectionRenderer || renderer,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateMultiCoordinatesArray"],
                    index
                ]);
                break;
            case 'Polygon':
            case 'MultiLineString':
                builderEnds = [];
                flatCoordinates = type == 'Polygon' ? /** @type {import("../../geom/Polygon.js").default} */ geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();
                offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ geometry.getEnds(), stride, builderEnds);
                this.instructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    renderer,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateCoordinatesArray"],
                    index
                ]);
                this.hitDetectionInstructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    hitDetectionRenderer || renderer,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateCoordinatesArray"],
                    index
                ]);
                break;
            case 'LineString':
            case 'Circle':
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
                this.instructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateCoordinates"],
                    index
                ]);
                this.hitDetectionInstructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    hitDetectionRenderer || renderer,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateCoordinates"],
                    index
                ]);
                break;
            case 'MultiPoint':
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
                if (builderEnd > builderBegin) {
                    this.instructions.push([
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        renderer,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateCoordinates"],
                        index
                    ]);
                    this.hitDetectionInstructions.push([
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        hitDetectionRenderer || renderer,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$inflate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inflateCoordinates"],
                        index
                    ]);
                }
                break;
            case 'Point':
                flatCoordinates = geometry.getFlatCoordinates();
                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
                builderEnd = this.coordinates.length;
                this.instructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                    undefined,
                    index
                ]);
                this.hitDetectionInstructions.push([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    hitDetectionRenderer || renderer,
                    undefined,
                    index
                ]);
                break;
            default:
        }
        this.endGeometry(feature);
    }
    /**
   * @protected
   * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} index Render order index
   */ beginGeometry(geometry, feature, index) {
        this.beginGeometryInstruction1_ = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].BEGIN_GEOMETRY,
            feature,
            0,
            geometry,
            index
        ];
        this.instructions.push(this.beginGeometryInstruction1_);
        this.beginGeometryInstruction2_ = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].BEGIN_GEOMETRY,
            feature,
            0,
            geometry,
            index
        ];
        this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */ finish() {
        return {
            instructions: this.instructions,
            hitDetectionInstructions: this.hitDetectionInstructions,
            coordinates: this.coordinates
        };
    }
    /**
   * Reverse the hit detection instructions.
   */ reverseHitDetectionInstructions() {
        const hitDetectionInstructions = this.hitDetectionInstructions;
        // step 1 - reverse array
        hitDetectionInstructions.reverse();
        // step 2 - reverse instructions within geometry blocks
        let i;
        const n = hitDetectionInstructions.length;
        let instruction;
        let type;
        let begin = -1;
        for(i = 0; i < n; ++i){
            instruction = hitDetectionInstructions[i];
            type = instruction[0];
            if (type == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].END_GEOMETRY) {
                begin = i;
            } else if (type == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].BEGIN_GEOMETRY) {
                instruction[2] = i;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reverseSubArray"])(this.hitDetectionInstructions, begin, i);
                begin = -1;
            }
        }
    }
    /**
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import('../canvas.js').FillStrokeState} [state] State.
   * @return {import('../canvas.js').FillStrokeState} State.
   */ fillStyleToState(fillStyle, state = {}) {
        if (fillStyle) {
            const fillStyleColor = fillStyle.getColor();
            state.fillPatternScale = fillStyleColor && typeof fillStyleColor === 'object' && 'src' in fillStyleColor ? this.pixelRatio : 1;
            state.fillStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(fillStyleColor ? fillStyleColor : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]);
        } else {
            state.fillStyle = undefined;
        }
        return state;
    }
    /**
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {import("../canvas.js").FillStrokeState} State.
   */ strokeStyleToState(strokeStyle, state = {}) {
        if (strokeStyle) {
            const strokeStyleColor = strokeStyle.getColor();
            state.strokeStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(strokeStyleColor ? strokeStyleColor : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultStrokeStyle"]);
            const strokeStyleLineCap = strokeStyle.getLineCap();
            state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineCap"];
            const strokeStyleLineDash = strokeStyle.getLineDash();
            state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"];
            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
            state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"];
            const strokeStyleLineJoin = strokeStyle.getLineJoin();
            state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineJoin"];
            const strokeStyleWidth = strokeStyle.getWidth();
            state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineWidth"];
            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
            state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultMiterLimit"];
            if (state.lineWidth > this.maxLineWidth) {
                this.maxLineWidth = state.lineWidth;
                // invalidate the buffered max extent cache
                this.bufferedMaxExtent_ = null;
            }
        } else {
            state.strokeStyle = undefined;
            state.lineCap = undefined;
            state.lineDash = null;
            state.lineDashOffset = undefined;
            state.lineJoin = undefined;
            state.lineWidth = undefined;
            state.miterLimit = undefined;
        }
        return state;
    }
    /**
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   * @override
   */ setFillStrokeStyle(fillStyle, strokeStyle) {
        const state = this.state;
        this.fillStyleToState(fillStyle, state);
        this.strokeStyleToState(strokeStyle, state);
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {Array<*>} Fill instruction.
   */ createFill(state) {
        const fillStyle = state.fillStyle;
        /** @type {Array<*>} */ const fillInstruction = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_FILL_STYLE,
            fillStyle
        ];
        if (typeof fillStyle !== 'string') {
            // Fill is a pattern or gradient - align and scale it!
            fillInstruction.push(state.fillPatternScale);
        }
        return fillInstruction;
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   */ applyStroke(state) {
        this.instructions.push(this.createStroke(state));
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {Array<*>} Stroke instruction.
   */ createStroke(state) {
        return [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth * this.pixelRatio,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            state.lineDash ? this.applyPixelRatio(state.lineDash) : null,
            state.lineDashOffset * this.pixelRatio
        ];
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
   */ updateFillStyle(state, createFill) {
        const fillStyle = state.fillStyle;
        if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
            this.instructions.push(createFill.call(this, state));
            state.currentFillStyle = fillStyle;
        }
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
   */ updateStrokeStyle(state, applyStroke) {
        const strokeStyle = state.strokeStyle;
        const lineCap = state.lineCap;
        const lineDash = state.lineDash;
        const lineDashOffset = state.lineDashOffset;
        const lineJoin = state.lineJoin;
        const lineWidth = state.lineWidth;
        const miterLimit = state.miterLimit;
        if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {
            applyStroke.call(this, state);
            state.currentStrokeStyle = strokeStyle;
            state.currentLineCap = lineCap;
            state.currentLineDash = lineDash;
            state.currentLineDashOffset = lineDashOffset;
            state.currentLineJoin = lineJoin;
            state.currentLineWidth = lineWidth;
            state.currentMiterLimit = miterLimit;
        }
    }
    /**
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ endGeometry(feature) {
        this.beginGeometryInstruction1_[2] = this.instructions.length;
        this.beginGeometryInstruction1_ = null;
        this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
        this.beginGeometryInstruction2_ = null;
        const endGeometryInstruction = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].END_GEOMETRY,
            feature
        ];
        this.instructions.push(endGeometryInstruction);
        this.hitDetectionInstructions.push(endGeometryInstruction);
    }
    /**
   * Get the buffered rendering extent.  Rendering will be clipped to the extent
   * provided to the constructor.  To account for symbolizers that may intersect
   * this extent, we calculate a buffered extent (e.g. based on stroke width).
   * @return {import("../../extent.js").Extent} The buffered rendering extent.
   * @protected
   */ getBufferedMaxExtent() {
        if (!this.bufferedMaxExtent_) {
            this.bufferedMaxExtent_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clone"])(this.maxExtent);
            if (this.maxLineWidth > 0) {
                const width = this.resolution * (this.maxLineWidth + 1) / 2;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buffer"])(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
            }
        }
        return this.bufferedMaxExtent_;
    }
}
const __TURBOPACK__default__export__ = CanvasBuilder;
}),
"[project]/node_modules/ol/render/canvas/ImageBuilder.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/ImageBuilder
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Builder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)");
;
;
;
class CanvasImageBuilder extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
        /**
     * @private
     * @type {import('../../DataTile.js').ImageLike}
     */ this.hitDetectionImage_ = null;
        /**
     * @private
     * @type {import('../../DataTile.js').ImageLike}
     */ this.image_ = null;
        /**
     * @private
     * @type {number|undefined}
     */ this.imagePixelRatio_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.anchorX_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.anchorY_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.height_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.opacity_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.originX_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.originY_ = undefined;
        /**
     * @private
     * @type {boolean|undefined}
     */ this.rotateWithView_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.rotation_ = undefined;
        /**
     * @private
     * @type {import("../../size.js").Size|undefined}
     */ this.scale_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.width_ = undefined;
        /**
     * @private
     * @type {import('../../style/Style.js').DeclutterMode}
     */ this.declutterMode_ = undefined;
        /**
     * Data shared with a text builder for combined decluttering.
     * @private
     * @type {import("../canvas.js").DeclutterImageWithText}
     */ this.declutterImageWithText_ = undefined;
    }
    /**
   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawPoint(pointGeometry, feature, index) {
        if (!this.image_ || this.maxExtent && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCoordinate"])(this.maxExtent, pointGeometry.getFlatCoordinates())) {
            return;
        }
        this.beginGeometry(pointGeometry, feature, index);
        const flatCoordinates = pointGeometry.getFlatCoordinates();
        const stride = pointGeometry.getStride();
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
        this.instructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE,
            myBegin,
            myEnd,
            this.image_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_ * this.imagePixelRatio_,
            this.anchorY_ * this.imagePixelRatio_,
            Math.ceil(this.height_ * this.imagePixelRatio_),
            this.opacity_,
            this.originX_ * this.imagePixelRatio_,
            this.originY_ * this.imagePixelRatio_,
            this.rotateWithView_,
            this.rotation_,
            [
                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_
            ],
            Math.ceil(this.width_ * this.imagePixelRatio_),
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.hitDetectionInstructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE,
            myBegin,
            myEnd,
            this.hitDetectionImage_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_,
            this.anchorY_,
            this.height_,
            1,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            this.scale_,
            this.width_,
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawMultiPoint(multiPointGeometry, feature, index) {
        if (!this.image_) {
            return;
        }
        this.beginGeometry(multiPointGeometry, feature, index);
        const flatCoordinates = multiPointGeometry.getFlatCoordinates();
        const filteredFlatCoordinates = [];
        for(let i = 0, ii = flatCoordinates.length; i < ii; i += multiPointGeometry.getStride()){
            if (!this.maxExtent || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCoordinate"])(this.maxExtent, flatCoordinates.slice(i, i + 2))) {
                filteredFlatCoordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
            }
        }
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatPointCoordinates(filteredFlatCoordinates, 2);
        this.instructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE,
            myBegin,
            myEnd,
            this.image_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_ * this.imagePixelRatio_,
            this.anchorY_ * this.imagePixelRatio_,
            Math.ceil(this.height_ * this.imagePixelRatio_),
            this.opacity_,
            this.originX_ * this.imagePixelRatio_,
            this.originY_ * this.imagePixelRatio_,
            this.rotateWithView_,
            this.rotation_,
            [
                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_
            ],
            Math.ceil(this.width_ * this.imagePixelRatio_),
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.hitDetectionInstructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE,
            myBegin,
            myEnd,
            this.hitDetectionImage_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_,
            this.anchorY_,
            this.height_,
            1,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            this.scale_,
            this.width_,
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.endGeometry(feature);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   * @override
   */ finish() {
        this.reverseHitDetectionInstructions();
        // FIXME this doesn't really protect us against further calls to draw*Geometry
        this.anchorX_ = undefined;
        this.anchorY_ = undefined;
        this.hitDetectionImage_ = null;
        this.image_ = null;
        this.imagePixelRatio_ = undefined;
        this.height_ = undefined;
        this.scale_ = undefined;
        this.opacity_ = undefined;
        this.originX_ = undefined;
        this.originY_ = undefined;
        this.rotateWithView_ = undefined;
        this.rotation_ = undefined;
        this.width_ = undefined;
        return super.finish();
    }
    /**
   * @param {import("../../style/Image.js").default} imageStyle Image style.
   * @param {Object} [sharedData] Shared data.
   * @override
   */ setImageStyle(imageStyle, sharedData) {
        const anchor = imageStyle.getAnchor();
        const size = imageStyle.getSize();
        const origin = imageStyle.getOrigin();
        this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
        this.anchorX_ = anchor[0];
        this.anchorY_ = anchor[1];
        this.hitDetectionImage_ = imageStyle.getHitDetectionImage();
        this.image_ = imageStyle.getImage(this.pixelRatio);
        this.height_ = size[1];
        this.opacity_ = imageStyle.getOpacity();
        this.originX_ = origin[0];
        this.originY_ = origin[1];
        this.rotateWithView_ = imageStyle.getRotateWithView();
        this.rotation_ = imageStyle.getRotation();
        this.scale_ = imageStyle.getScaleArray();
        this.width_ = size[0];
        this.declutterMode_ = imageStyle.getDeclutterMode();
        this.declutterImageWithText_ = sharedData;
    }
}
const __TURBOPACK__default__export__ = CanvasImageBuilder;
}),
"[project]/node_modules/ol/render/canvas/LineStringBuilder.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/LineStringBuilder
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Builder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)");
;
;
;
class CanvasLineStringBuilder extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   * @return {number} end.
   */ drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
        const moveToLineToInstruction = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].MOVE_TO_LINE_TO,
            myBegin,
            myEnd
        ];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        return end;
    }
    /**
   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawLineString(lineStringGeometry, feature, index) {
        const state = this.state;
        const strokeStyle = state.strokeStyle;
        const lineWidth = state.lineWidth;
        if (strokeStyle === undefined || lineWidth === undefined) {
            return;
        }
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(lineStringGeometry, feature, index);
        this.hitDetectionInstructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"]
        ], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"]);
        const flatCoordinates = lineStringGeometry.getFlatCoordinates();
        const stride = lineStringGeometry.getStride();
        this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
        this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawMultiLineString(multiLineStringGeometry, feature, index) {
        const state = this.state;
        const strokeStyle = state.strokeStyle;
        const lineWidth = state.lineWidth;
        if (strokeStyle === undefined || lineWidth === undefined) {
            return;
        }
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(multiLineStringGeometry, feature, index);
        this.hitDetectionInstructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"]
        ], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"]);
        const ends = multiLineStringGeometry.getEnds();
        const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
        const stride = multiLineStringGeometry.getStride();
        let offset = 0;
        for(let i = 0, ii = ends.length; i < ii; ++i){
            offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
        }
        this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
        this.endGeometry(feature);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   * @override
   */ finish() {
        const state = this.state;
        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
            this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
        }
        this.reverseHitDetectionInstructions();
        this.state = null;
        return super.finish();
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @override
   */ applyStroke(state) {
        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
            this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
            state.lastStroke = this.coordinates.length;
        }
        state.lastStroke = 0;
        super.applyStroke(state);
        this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"]);
    }
}
const __TURBOPACK__default__export__ = CanvasLineStringBuilder;
}),
"[project]/node_modules/ol/render/canvas/PolygonBuilder.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/PolygonBuilder
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$simplify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/simplify.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Builder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)");
;
;
;
;
class CanvasPolygonBuilder extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @private
   * @return {number} End.
   */ drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {
        const state = this.state;
        const fill = state.fillStyle !== undefined;
        const stroke = state.strokeStyle !== undefined;
        const numEnds = ends.length;
        this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"]);
        this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"]);
        for(let i = 0; i < numEnds; ++i){
            const end = ends[i];
            const myBegin = this.coordinates.length;
            const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
            const moveToLineToInstruction = [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].MOVE_TO_LINE_TO,
                myBegin,
                myEnd
            ];
            this.instructions.push(moveToLineToInstruction);
            this.hitDetectionInstructions.push(moveToLineToInstruction);
            if (stroke) {
                // Performance optimization: only call closePath() when we have a stroke.
                // Otherwise the ring is closed already (see appendFlatLineCoordinates above).
                this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["closePathInstruction"]);
                this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["closePathInstruction"]);
            }
            offset = end;
        }
        if (fill) {
            this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fillInstruction"]);
            this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fillInstruction"]);
        }
        if (stroke) {
            this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
            this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
        }
        return offset;
    }
    /**
   * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawCircle(circleGeometry, feature, index) {
        const state = this.state;
        const fillStyle = state.fillStyle;
        const strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) {
            return;
        }
        this.setFillStrokeStyles_();
        this.beginGeometry(circleGeometry, feature, index);
        if (state.fillStyle !== undefined) {
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_FILL_STYLE,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]
            ]);
        }
        if (state.strokeStyle !== undefined) {
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"],
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"]
            ]);
        }
        const flatCoordinates = circleGeometry.getFlatCoordinates();
        const stride = circleGeometry.getStride();
        const myBegin = this.coordinates.length;
        this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
        const circleInstruction = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CIRCLE,
            myBegin
        ];
        this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"], circleInstruction);
        this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["beginPathInstruction"], circleInstruction);
        if (state.fillStyle !== undefined) {
            this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fillInstruction"]);
            this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fillInstruction"]);
        }
        if (state.strokeStyle !== undefined) {
            this.instructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
            this.hitDetectionInstructions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strokeInstruction"]);
        }
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawPolygon(polygonGeometry, feature, index) {
        const state = this.state;
        const fillStyle = state.fillStyle;
        const strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) {
            return;
        }
        this.setFillStrokeStyles_();
        this.beginGeometry(polygonGeometry, feature, index);
        if (state.fillStyle !== undefined) {
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_FILL_STYLE,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]
            ]);
        }
        if (state.strokeStyle !== undefined) {
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"],
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"]
            ]);
        }
        const ends = polygonGeometry.getEnds();
        const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
        const stride = polygonGeometry.getStride();
        this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawMultiPolygon(multiPolygonGeometry, feature, index) {
        const state = this.state;
        const fillStyle = state.fillStyle;
        const strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) {
            return;
        }
        this.setFillStrokeStyles_();
        this.beginGeometry(multiPolygonGeometry, feature, index);
        if (state.fillStyle !== undefined) {
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_FILL_STYLE,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]
            ]);
        }
        if (state.strokeStyle !== undefined) {
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"],
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"]
            ]);
        }
        const endss = multiPolygonGeometry.getEndss();
        const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
        const stride = multiPolygonGeometry.getStride();
        let offset = 0;
        for(let i = 0, ii = endss.length; i < ii; ++i){
            offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
        }
        this.endGeometry(feature);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   * @override
   */ finish() {
        this.reverseHitDetectionInstructions();
        this.state = null;
        // We want to preserve topology when drawing polygons.  Polygons are
        // simplified using quantization and point elimination. However, we might
        // have received a mix of quantized and non-quantized geometries, so ensure
        // that all are quantized by quantizing all coordinates in the batch.
        const tolerance = this.tolerance;
        if (tolerance !== 0) {
            const coordinates = this.coordinates;
            for(let i = 0, ii = coordinates.length; i < ii; ++i){
                coordinates[i] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$simplify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["snap"])(coordinates[i], tolerance);
            }
        }
        return super.finish();
    }
    /**
   * @private
   */ setFillStrokeStyles_() {
        const state = this.state;
        this.updateFillStyle(state, this.createFill);
        this.updateStrokeStyle(state, this.applyStroke);
    }
}
const __TURBOPACK__default__export__ = CanvasPolygonBuilder;
}),
"[project]/node_modules/ol/render/canvas/TextBuilder.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/TextBuilder
 */ __turbopack_context__.s([
    "TEXT_ALIGN",
    ()=>TEXT_ALIGN,
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/colorlike.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$linechunk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/linechunk.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$straightchunk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/straightchunk.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/util.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Builder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const TEXT_ALIGN = {
    'left': 0,
    'center': 0.5,
    'right': 1,
    'top': 0,
    'middle': 0.5,
    'hanging': 0.2,
    'alphabetic': 0.8,
    'ideographic': 0.8,
    'bottom': 1
};
class CanvasTextBuilder extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
        /**
     * @private
     * @type {Array<HTMLCanvasElement>}
     */ this.labels_ = null;
        /**
     * @private
     * @type {string|Array<string>}
     */ this.text_ = '';
        /**
     * @private
     * @type {number}
     */ this.textOffsetX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.textOffsetY_ = 0;
        /**
     * @private
     * @type {boolean|undefined}
     */ this.textRotateWithView_ = undefined;
        /**
     * @private
     * @type {boolean|undefined}
     */ this.textKeepUpright_ = undefined;
        /**
     * @private
     * @type {number}
     */ this.textRotation_ = 0;
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.textFillState_ = null;
        /**
     * @type {!Object<string, import("../canvas.js").FillState>}
     */ this.fillStates = {};
        this.fillStates[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]] = {
            fillStyle: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]
        };
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.textStrokeState_ = null;
        /**
     * @type {!Object<string, import("../canvas.js").StrokeState>}
     */ this.strokeStates = {};
        /**
     * @private
     * @type {import("../canvas.js").TextState}
     */ this.textState_ = {};
        /**
     * @type {!Object<string, import("../canvas.js").TextState>}
     */ this.textStates = {};
        /**
     * @private
     * @type {string}
     */ this.textKey_ = '';
        /**
     * @private
     * @type {string}
     */ this.fillKey_ = '';
        /**
     * @private
     * @type {string}
     */ this.strokeKey_ = '';
        /**
     * @private
     * @type {import('../../style/Style.js').DeclutterMode}
     */ this.declutterMode_ = undefined;
        /**
     * Data shared with an image builder for combined decluttering.
     * @private
     * @type {import("../canvas.js").DeclutterImageWithText}
     */ this.declutterImageWithText_ = undefined;
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   * @override
   */ finish() {
        const instructions = super.finish();
        instructions.textStates = this.textStates;
        instructions.fillStates = this.fillStates;
        instructions.strokeStates = this.strokeStates;
        return instructions;
    }
    /**
   * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @override
   */ drawText(geometry, feature, index) {
        const fillState = this.textFillState_;
        const strokeState = this.textStrokeState_;
        const textState = this.textState_;
        if (this.text_ === '' || !textState || !fillState && !strokeState) {
            return;
        }
        const coordinates = this.coordinates;
        let begin = coordinates.length;
        const geometryType = geometry.getType();
        let flatCoordinates = null;
        let stride = geometry.getStride();
        if (textState.placement === 'line' && (geometryType == 'LineString' || geometryType == 'MultiLineString' || geometryType == 'Polygon' || geometryType == 'MultiPolygon')) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(this.maxExtent, geometry.getExtent())) {
                return;
            }
            let ends;
            flatCoordinates = geometry.getFlatCoordinates();
            if (geometryType == 'LineString') {
                ends = [
                    flatCoordinates.length
                ];
            } else if (geometryType == 'MultiLineString') {
                ends = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.getEnds();
            } else if (geometryType == 'Polygon') {
                ends = /** @type {import("../../geom/Polygon.js").default} */ geometry.getEnds().slice(0, 1);
            } else if (geometryType == 'MultiPolygon') {
                const endss = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getEndss();
                ends = [];
                for(let i = 0, ii = endss.length; i < ii; ++i){
                    ends.push(endss[i][0]);
                }
            }
            this.beginGeometry(geometry, feature, index);
            const repeat = textState.repeat;
            const textAlign = repeat ? undefined : textState.textAlign;
            // No `justify` support for line placement.
            let flatOffset = 0;
            for(let o = 0, oo = ends.length; o < oo; ++o){
                let chunks;
                if (repeat) {
                    chunks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$linechunk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lineChunk"])(repeat * this.resolution, flatCoordinates, flatOffset, ends[o], stride);
                } else {
                    chunks = [
                        flatCoordinates.slice(flatOffset, ends[o])
                    ];
                }
                for(let c = 0, cc = chunks.length; c < cc; ++c){
                    const chunk = chunks[c];
                    let chunkBegin = 0;
                    let chunkEnd = chunk.length;
                    if (textAlign == undefined) {
                        const range = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$straightchunk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchingChunk"])(textState.maxAngle, chunk, 0, chunk.length, 2);
                        chunkBegin = range[0];
                        chunkEnd = range[1];
                    }
                    for(let i = chunkBegin; i < chunkEnd; i += stride){
                        coordinates.push(chunk[i], chunk[i + 1]);
                    }
                    const end = coordinates.length;
                    flatOffset = ends[o];
                    this.drawChars_(begin, end);
                    begin = end;
                }
            }
            this.endGeometry(feature);
        } else {
            let geometryWidths = textState.overflow ? null : [];
            switch(geometryType){
                case 'Point':
                case 'MultiPoint':
                    flatCoordinates = /** @type {import("../../geom/MultiPoint.js").default} */ geometry.getFlatCoordinates();
                    break;
                case 'LineString':
                    flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ geometry.getFlatMidpoint();
                    break;
                case 'Circle':
                    flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ geometry.getCenter();
                    break;
                case 'MultiLineString':
                    flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.getFlatMidpoints();
                    stride = 2;
                    break;
                case 'Polygon':
                    flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ geometry.getFlatInteriorPoint();
                    if (!textState.overflow) {
                        geometryWidths.push(flatCoordinates[2] / this.resolution);
                    }
                    stride = 3;
                    break;
                case 'MultiPolygon':
                    const interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getFlatInteriorPoints();
                    flatCoordinates = [];
                    for(let i = 0, ii = interiorPoints.length; i < ii; i += 3){
                        if (!textState.overflow) {
                            geometryWidths.push(interiorPoints[i + 2] / this.resolution);
                        }
                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
                    }
                    if (flatCoordinates.length === 0) {
                        return;
                    }
                    stride = 2;
                    break;
                default:
            }
            const end = this.appendFlatPointCoordinates(flatCoordinates, stride);
            if (end === begin) {
                return;
            }
            if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {
                let beg = begin / 2;
                geometryWidths = geometryWidths.filter((w, i)=>{
                    const keep = coordinates[(beg + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];
                    if (!keep) {
                        --beg;
                    }
                    return keep;
                });
            }
            this.saveTextStates_();
            const backgroundFill = textState.backgroundFill ? this.createFill(this.fillStyleToState(textState.backgroundFill)) : null;
            const backgroundStroke = textState.backgroundStroke ? this.createStroke(this.strokeStyleToState(textState.backgroundStroke)) : null;
            this.beginGeometry(geometry, feature, index);
            // adjust padding for negative scale
            let padding = textState.padding;
            if (padding != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"] && (textState.scale[0] < 0 || textState.scale[1] < 0)) {
                let p0 = textState.padding[0];
                let p1 = textState.padding[1];
                let p2 = textState.padding[2];
                let p3 = textState.padding[3];
                if (textState.scale[0] < 0) {
                    p1 = -p1;
                    p3 = -p3;
                }
                if (textState.scale[1] < 0) {
                    p0 = -p0;
                    p2 = -p2;
                }
                padding = [
                    p0,
                    p1,
                    p2,
                    p3
                ];
            }
            // The image is unknown at this stage so we pass null; it will be computed at render time.
            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
            // render time.
            const pixelRatio = this.pixelRatio;
            this.instructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE,
                begin,
                end,
                null,
                NaN,
                NaN,
                NaN,
                1,
                0,
                0,
                this.textRotateWithView_,
                this.textRotation_,
                [
                    1,
                    1
                ],
                NaN,
                this.declutterMode_,
                this.declutterImageWithText_,
                padding == __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"] ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"] : padding.map(function(p) {
                    return p * pixelRatio;
                }),
                backgroundFill,
                backgroundStroke,
                this.text_,
                this.textKey_,
                this.strokeKey_,
                this.fillKey_,
                this.textOffsetX_,
                this.textOffsetY_,
                geometryWidths
            ]);
            const scale = 1 / pixelRatio;
            // Set default fill for hit detection background
            const hitDetectionBackgroundFill = backgroundFill ? backgroundFill.slice(0) : null;
            if (hitDetectionBackgroundFill) {
                hitDetectionBackgroundFill[1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"];
            }
            this.hitDetectionInstructions.push([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE,
                begin,
                end,
                null,
                NaN,
                NaN,
                NaN,
                1,
                0,
                0,
                this.textRotateWithView_,
                this.textRotation_,
                [
                    scale,
                    scale
                ],
                NaN,
                this.declutterMode_,
                this.declutterImageWithText_,
                padding,
                hitDetectionBackgroundFill,
                backgroundStroke,
                this.text_,
                this.textKey_,
                this.strokeKey_,
                this.fillKey_ ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"] : this.fillKey_,
                this.textOffsetX_,
                this.textOffsetY_,
                geometryWidths
            ]);
            this.endGeometry(feature);
        }
    }
    /**
   * @private
   */ saveTextStates_() {
        const strokeState = this.textStrokeState_;
        const textState = this.textState_;
        const fillState = this.textFillState_;
        const strokeKey = this.strokeKey_;
        if (strokeState) {
            if (!(strokeKey in this.strokeStates)) {
                this.strokeStates[strokeKey] = {
                    strokeStyle: strokeState.strokeStyle,
                    lineCap: strokeState.lineCap,
                    lineDashOffset: strokeState.lineDashOffset,
                    lineWidth: strokeState.lineWidth,
                    lineJoin: strokeState.lineJoin,
                    miterLimit: strokeState.miterLimit,
                    lineDash: strokeState.lineDash
                };
            }
        }
        const textKey = this.textKey_;
        if (!(textKey in this.textStates)) {
            this.textStates[textKey] = {
                font: textState.font,
                textAlign: textState.textAlign || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextAlign"],
                justify: textState.justify,
                textBaseline: textState.textBaseline || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextBaseline"],
                scale: textState.scale
            };
        }
        const fillKey = this.fillKey_;
        if (fillState) {
            if (!(fillKey in this.fillStates)) {
                this.fillStates[fillKey] = {
                    fillStyle: fillState.fillStyle
                };
            }
        }
    }
    /**
   * @private
   * @param {number} begin Begin.
   * @param {number} end End.
   */ drawChars_(begin, end) {
        const strokeState = this.textStrokeState_;
        const textState = this.textState_;
        const strokeKey = this.strokeKey_;
        const textKey = this.textKey_;
        const fillKey = this.fillKey_;
        this.saveTextStates_();
        const pixelRatio = this.pixelRatio;
        const baseline = TEXT_ALIGN[textState.textBaseline];
        const offsetY = this.textOffsetY_ * pixelRatio;
        const text = this.text_;
        const strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;
        this.instructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_CHARS,
            begin,
            end,
            baseline,
            textState.overflow,
            fillKey,
            textState.maxAngle,
            pixelRatio,
            offsetY,
            strokeKey,
            strokeWidth * pixelRatio,
            text,
            textKey,
            1,
            this.declutterMode_,
            this.textKeepUpright_
        ]);
        this.hitDetectionInstructions.push([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_CHARS,
            begin,
            end,
            baseline,
            textState.overflow,
            fillKey ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"] : fillKey,
            textState.maxAngle,
            pixelRatio,
            offsetY,
            strokeKey,
            strokeWidth * pixelRatio,
            text,
            textKey,
            1 / pixelRatio,
            this.declutterMode_,
            this.textKeepUpright_
        ]);
    }
    /**
   * @param {import("../../style/Text.js").default} textStyle Text style.
   * @param {Object} [sharedData] Shared data.
   * @override
   */ setTextStyle(textStyle, sharedData) {
        let textState, fillState, strokeState;
        if (!textStyle) {
            this.text_ = '';
        } else {
            const textFillStyle = textStyle.getFill();
            if (!textFillStyle) {
                fillState = null;
                this.textFillState_ = fillState;
            } else {
                fillState = this.textFillState_;
                if (!fillState) {
                    fillState = {};
                    this.textFillState_ = fillState;
                }
                fillState.fillStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(textFillStyle.getColor() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"]);
            }
            const textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) {
                strokeState = null;
                this.textStrokeState_ = strokeState;
            } else {
                strokeState = this.textStrokeState_;
                if (!strokeState) {
                    strokeState = {};
                    this.textStrokeState_ = strokeState;
                }
                const lineDash = textStrokeStyle.getLineDash();
                const lineDashOffset = textStrokeStyle.getLineDashOffset();
                const lineWidth = textStrokeStyle.getWidth();
                const miterLimit = textStrokeStyle.getMiterLimit();
                strokeState.lineCap = textStrokeStyle.getLineCap() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineCap"];
                strokeState.lineDash = lineDash ? lineDash.slice() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"];
                strokeState.lineDashOffset = lineDashOffset === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"] : lineDashOffset;
                strokeState.lineJoin = textStrokeStyle.getLineJoin() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineJoin"];
                strokeState.lineWidth = lineWidth === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineWidth"] : lineWidth;
                strokeState.miterLimit = miterLimit === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultMiterLimit"] : miterLimit;
                strokeState.strokeStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(textStrokeStyle.getColor() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultStrokeStyle"]);
            }
            textState = this.textState_;
            const font = textStyle.getFont() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFont"];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registerFont"])(font);
            const textScale = textStyle.getScaleArray();
            textState.overflow = textStyle.getOverflow();
            textState.font = font;
            textState.maxAngle = textStyle.getMaxAngle();
            textState.placement = textStyle.getPlacement();
            textState.textAlign = textStyle.getTextAlign();
            textState.repeat = textStyle.getRepeat();
            textState.justify = textStyle.getJustify();
            textState.textBaseline = textStyle.getTextBaseline() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextBaseline"];
            textState.backgroundFill = textStyle.getBackgroundFill();
            textState.backgroundStroke = textStyle.getBackgroundStroke();
            textState.padding = textStyle.getPadding() || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"];
            textState.scale = textScale === undefined ? [
                1,
                1
            ] : textScale;
            const textOffsetX = textStyle.getOffsetX();
            const textOffsetY = textStyle.getOffsetY();
            const textRotateWithView = textStyle.getRotateWithView();
            const textKeepUpright = textStyle.getKeepUpright();
            const textRotation = textStyle.getRotation();
            this.text_ = textStyle.getText() || '';
            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
            this.textKeepUpright_ = textKeepUpright === undefined ? true : textKeepUpright;
            this.textRotation_ = textRotation === undefined ? 0 : textRotation;
            this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';
            this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.repeat || '?') + (textState.justify || '?') + (textState.textBaseline || '?');
            this.fillKey_ = fillState && fillState.fillStyle ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUid"])(fillState.fillStyle) : '';
        }
        this.declutterMode_ = textStyle.getDeclutterMode();
        this.declutterImageWithText_ = sharedData;
    }
}
const __TURBOPACK__default__export__ = CanvasTextBuilder;
}),
"[project]/node_modules/ol/render/canvas/BuilderGroup.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/BuilderGroup
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Builder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ImageBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/ImageBuilder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$LineStringBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/LineStringBuilder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$PolygonBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/PolygonBuilder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$TextBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/TextBuilder.js [app-ssr] (ecmascript)");
;
;
;
;
;
/**
 * @type {Object<import("../canvas.js").BuilderType, typeof Builder>}
 */ const BATCH_CONSTRUCTORS = {
    'Circle': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$PolygonBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    'Default': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Builder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    'Image': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ImageBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    'LineString': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$LineStringBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    'Polygon': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$PolygonBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    'Text': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$TextBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
};
class BuilderGroup {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Max extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        /**
     * @private
     * @type {number}
     */ this.tolerance_ = tolerance;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.maxExtent_ = maxExtent;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {number}
     */ this.resolution_ = resolution;
        /**
     * @private
     * @type {!Object<string, !Object<import("../canvas.js").BuilderType, Builder>>}
     */ this.buildersByZIndex_ = {};
    }
    /**
   * @return {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Builder.js").SerializableInstructions>>} The serializable instructions
   */ finish() {
        const builderInstructions = {};
        for(const zKey in this.buildersByZIndex_){
            builderInstructions[zKey] = builderInstructions[zKey] || {};
            const builders = this.buildersByZIndex_[zKey];
            for(const builderKey in builders){
                const builderInstruction = builders[builderKey].finish();
                builderInstructions[zKey][builderKey] = builderInstruction;
            }
        }
        return builderInstructions;
    }
    /**
   * @param {number|undefined} zIndex Z index.
   * @param {import("../canvas.js").BuilderType} builderType Replay type.
   * @return {import("../VectorContext.js").default} Replay.
   */ getBuilder(zIndex, builderType) {
        const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
        let replays = this.buildersByZIndex_[zIndexKey];
        if (replays === undefined) {
            replays = {};
            this.buildersByZIndex_[zIndexKey] = replays;
        }
        let replay = replays[builderType];
        if (replay === undefined) {
            const Constructor = BATCH_CONSTRUCTORS[builderType];
            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
            replays[builderType] = replay;
        }
        return replay;
    }
}
const __TURBOPACK__default__export__ = BuilderGroup;
}),
"[project]/node_modules/ol/render/canvas/Executor.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/Executor
 */ __turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$length$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/length.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$textpath$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/textpath.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ZIndexContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/ZIndexContext.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Instruction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$TextBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/TextBuilder.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
/**
 * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry
 */ /**
 * @typedef {Object} ImageOrLabelDimensions
 * @property {number} drawImageX DrawImageX.
 * @property {number} drawImageY DrawImageY.
 * @property {number} drawImageW DrawImageW.
 * @property {number} drawImageH DrawImageH.
 * @property {number} originX OriginX.
 * @property {number} originY OriginY.
 * @property {Array<number>} scale Scale.
 * @property {DeclutterEntry} declutterBox DeclutterBox.
 * @property {import("../../transform.js").Transform} canvasTransform CanvasTransform.
 */ /**
 * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs
 */ /**
 * @template T
 * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, import("../../style/Style.js").DeclutterMode): T} FeatureCallback
 */ /**
 * @type {import("../../extent.js").Extent}
 */ const tmpExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createEmpty"])();
/** @type {import("../../coordinate.js").Coordinate} */ const p1 = [];
/** @type {import("../../coordinate.js").Coordinate} */ const p2 = [];
/** @type {import("../../coordinate.js").Coordinate} */ const p3 = [];
/** @type {import("../../coordinate.js").Coordinate} */ const p4 = [];
/**
 * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel
 * @return {DeclutterEntry} Declutter rbush entry.
 */ function getDeclutterBox(replayImageOrLabelArgs) {
    return replayImageOrLabelArgs[3].declutterBox;
}
const rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */ '[' + String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) + ']');
/**
 * @param {string} text Text.
 * @param {CanvasTextAlign} align Alignment.
 * @return {number} Text alignment.
 */ function horizontalTextAlign(text, align) {
    if (align === 'start') {
        align = rtlRegEx.test(text) ? 'right' : 'left';
    } else if (align === 'end') {
        align = rtlRegEx.test(text) ? 'left' : 'right';
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$TextBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TEXT_ALIGN"][align];
}
/**
 * @param {Array<string>} acc Accumulator.
 * @param {string} line Line of text.
 * @param {number} i Index
 * @return {Array<string>} Accumulator.
 */ function createTextChunks(acc, line, i) {
    if (i > 0) {
        acc.push('\n', '');
    }
    acc.push(line, '');
    return acc;
}
/**
 * Converts rich text to plain text for text along lines.
 * @param {string} result The resulting plain text.
 * @param {string} part Item of the rich text array.
 * @param {number} index Index of the item in the rich text array.
 * @return {string} The resulting plain text.
 */ function richTextToPlainText(result, part, index) {
    if (index % 2 === 0) {
        result += part;
    }
    return result;
}
class Executor {
    /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {boolean} overlaps The replay can have overlapping geometries.
   * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions.
   * @param {boolean} [deferredRendering] Enable deferred rendering.
   */ constructor(resolution, pixelRatio, overlaps, instructions, deferredRendering){
        /**
     * @protected
     * @type {boolean}
     */ this.overlaps = overlaps;
        /**
     * @protected
     * @type {number}
     */ this.pixelRatio = pixelRatio;
        /**
     * @protected
     * @const
     * @type {number}
     */ this.resolution = resolution;
        /**
     * @private
     * @type {number}
     */ this.alignAndScaleFill_;
        /**
     * @protected
     * @type {Array<*>}
     */ this.instructions = instructions.instructions;
        /**
     * @protected
     * @type {Array<number>}
     */ this.coordinates = instructions.coordinates;
        /**
     * @private
     * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
     */ this.coordinateCache_ = {};
        /**
     * @private
     * @type {!import("../../transform.js").Transform}
     */ this.renderedTransform_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
        /**
     * @protected
     * @type {Array<*>}
     */ this.hitDetectionInstructions = instructions.hitDetectionInstructions;
        /**
     * @private
     * @type {Array<number>}
     */ this.pixelCoordinates_ = null;
        /**
     * @private
     * @type {number}
     */ this.viewRotation_ = 0;
        /**
     * @type {!Object<string, import("../canvas.js").FillState>}
     */ this.fillStates = instructions.fillStates || {};
        /**
     * @type {!Object<string, import("../canvas.js").StrokeState>}
     */ this.strokeStates = instructions.strokeStates || {};
        /**
     * @type {!Object<string, import("../canvas.js").TextState>}
     */ this.textStates = instructions.textStates || {};
        /**
     * @private
     * @type {Object<string, Object<string, number>>}
     */ this.widths_ = {};
        /**
     * @private
     * @type {Object<string, import("../canvas.js").Label>}
     */ this.labels_ = {};
        /**
     * @private
     * @type {import("../canvas/ZIndexContext.js").default}
     */ this.zIndexContext_ = deferredRendering ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$ZIndexContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]() : null;
    }
    /**
   * @return {ZIndexContext} ZIndex context.
   */ getZIndexContext() {
        return this.zIndexContext_;
    }
    /**
   * @param {string|Array<string>} text Text.
   * @param {string} textKey Text style key.
   * @param {string} fillKey Fill style key.
   * @param {string} strokeKey Stroke style key.
   * @return {import("../canvas.js").Label} Label.
   */ createLabel(text, textKey, fillKey, strokeKey) {
        const key = text + textKey + fillKey + strokeKey;
        if (this.labels_[key]) {
            return this.labels_[key];
        }
        const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
        const fillState = fillKey ? this.fillStates[fillKey] : null;
        const textState = this.textStates[textKey];
        const pixelRatio = this.pixelRatio;
        const scale = [
            textState.scale[0] * pixelRatio,
            textState.scale[1] * pixelRatio
        ];
        const align = textState.justify ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$TextBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TEXT_ALIGN"][textState.justify] : horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextAlign"]);
        const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
        const chunks = Array.isArray(text) ? text : String(text).split('\n').reduce(createTextChunks, []);
        const { width, height, widths, heights, lineWidths } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTextDimensions"])(textState, chunks);
        const renderWidth = width + strokeWidth;
        const contextInstructions = [];
        // make canvas 2 pixels wider to account for italic text width measurement errors
        const w = (renderWidth + 2) * scale[0];
        const h = (height + strokeWidth) * scale[1];
        /** @type {import("../canvas.js").Label} */ const label = {
            width: w < 0 ? Math.floor(w) : Math.ceil(w),
            height: h < 0 ? Math.floor(h) : Math.ceil(h),
            contextInstructions: contextInstructions
        };
        if (scale[0] != 1 || scale[1] != 1) {
            contextInstructions.push('scale', scale);
        }
        if (strokeKey) {
            contextInstructions.push('strokeStyle', strokeState.strokeStyle);
            contextInstructions.push('lineWidth', strokeWidth);
            contextInstructions.push('lineCap', strokeState.lineCap);
            contextInstructions.push('lineJoin', strokeState.lineJoin);
            contextInstructions.push('miterLimit', strokeState.miterLimit);
            contextInstructions.push('setLineDash', [
                strokeState.lineDash
            ]);
            contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);
        }
        if (fillKey) {
            contextInstructions.push('fillStyle', fillState.fillStyle);
        }
        contextInstructions.push('textBaseline', 'middle');
        contextInstructions.push('textAlign', 'center');
        const leftRight = 0.5 - align;
        let x = align * renderWidth + leftRight * strokeWidth;
        const strokeInstructions = [];
        const fillInstructions = [];
        let lineHeight = 0;
        let lineOffset = 0;
        let widthHeightIndex = 0;
        let lineWidthIndex = 0;
        let previousFont;
        for(let i = 0, ii = chunks.length; i < ii; i += 2){
            const text = chunks[i];
            if (text === '\n') {
                lineOffset += lineHeight;
                lineHeight = 0;
                x = align * renderWidth + leftRight * strokeWidth;
                ++lineWidthIndex;
                continue;
            }
            const font = chunks[i + 1] || textState.font;
            if (font !== previousFont) {
                if (strokeKey) {
                    strokeInstructions.push('font', font);
                }
                if (fillKey) {
                    fillInstructions.push('font', font);
                }
                previousFont = font;
            }
            lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);
            const fillStrokeArgs = [
                text,
                x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),
                0.5 * (strokeWidth + lineHeight) + lineOffset
            ];
            x += widths[widthHeightIndex];
            if (strokeKey) {
                strokeInstructions.push('strokeText', fillStrokeArgs);
            }
            if (fillKey) {
                fillInstructions.push('fillText', fillStrokeArgs);
            }
            ++widthHeightIndex;
        }
        Array.prototype.push.apply(contextInstructions, strokeInstructions);
        Array.prototype.push.apply(contextInstructions, fillInstructions);
        this.labels_[key] = label;
        return label;
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
   * @param {Array<*>} fillInstruction Fill instruction.
   * @param {Array<*>} strokeInstruction Stroke instruction.
   */ replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {
        context.beginPath();
        context.moveTo.apply(context, p1);
        context.lineTo.apply(context, p2);
        context.lineTo.apply(context, p3);
        context.lineTo.apply(context, p4);
        context.lineTo.apply(context, p1);
        if (fillInstruction) {
            this.alignAndScaleFill_ = fillInstruction[2];
            context.fillStyle = fillInstruction[1];
            this.fill_(context);
        }
        if (strokeInstruction) {
            this.setStrokeStyle_(context, strokeInstruction);
            context.stroke();
        }
    }
    /**
   * @private
   * @param {number} sheetWidth Width of the sprite sheet.
   * @param {number} sheetHeight Height of the sprite sheet.
   * @param {number} centerX X.
   * @param {number} centerY Y.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number} anchorX Anchor X.
   * @param {number} anchorY Anchor Y.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} rotation Rotation.
   * @param {import("../../size.js").Size} scale Scale.
   * @param {boolean} snapToPixel Snap to pixel.
   * @param {Array<number>} padding Padding.
   * @param {boolean} fillStroke Background fill or stroke.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
   */ calculateImageOrLabelDimensions_(sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {
        anchorX *= scale[0];
        anchorY *= scale[1];
        let x = centerX - anchorX;
        let y = centerY - anchorY;
        const w = width + originX > sheetWidth ? sheetWidth - originX : width;
        const h = height + originY > sheetHeight ? sheetHeight - originY : height;
        const boxW = padding[3] + w * scale[0] + padding[1];
        const boxH = padding[0] + h * scale[1] + padding[2];
        const boxX = x - padding[3];
        const boxY = y - padding[0];
        if (fillStroke || rotation !== 0) {
            p1[0] = boxX;
            p4[0] = boxX;
            p1[1] = boxY;
            p2[1] = boxY;
            p2[0] = boxX + boxW;
            p3[0] = p2[0];
            p3[1] = boxY + boxH;
            p4[1] = p3[1];
        }
        let transform;
        if (rotation !== 0) {
            transform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(transform, p1);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(transform, p2);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(transform, p3);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(transform, p4);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createOrUpdate"])(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createOrUpdate"])(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), tmpExtent);
        }
        if (snapToPixel) {
            x = Math.round(x);
            y = Math.round(y);
        }
        return {
            drawImageX: x,
            drawImageY: y,
            drawImageW: w,
            drawImageH: h,
            originX: originX,
            originY: originY,
            declutterBox: {
                minX: tmpExtent[0],
                minY: tmpExtent[1],
                maxX: tmpExtent[2],
                maxY: tmpExtent[3],
                value: feature
            },
            canvasTransform: transform,
            scale: scale
        };
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.
   * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
   * @param {ImageOrLabelDimensions} dimensions Dimensions.
   * @param {number} opacity Opacity.
   * @param {Array<*>} fillInstruction Fill instruction.
   * @param {Array<*>} strokeInstruction Stroke instruction.
   * @return {boolean} The image or label was rendered.
   */ replayImageOrLabel_(context, scaledCanvasSize, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {
        const fillStroke = !!(fillInstruction || strokeInstruction);
        const box = dimensions.declutterBox;
        const strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;
        const intersects = box.minX - strokePadding <= scaledCanvasSize[0] && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= scaledCanvasSize[1] && box.maxY + strokePadding >= 0;
        if (intersects) {
            if (fillStroke) {
                this.replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction);
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["drawImageOrLabel"])(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);
        }
        return true;
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   */ fill_(context) {
        const alignAndScale = this.alignAndScaleFill_;
        if (alignAndScale) {
            const origin = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["apply"])(this.renderedTransform_, [
                0,
                0
            ]);
            const repeatSize = 512 * this.pixelRatio;
            context.save();
            context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
            if (alignAndScale !== 1) {
                context.scale(alignAndScale, alignAndScale);
            }
            context.rotate(this.viewRotation_);
        }
        context.fill();
        if (alignAndScale) {
            context.restore();
        }
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {Array<*>} instruction Instruction.
   */ setStrokeStyle_(context, instruction) {
        context.strokeStyle = instruction[1];
        if (!instruction[1]) {
            return;
        }
        context.lineWidth = instruction[2];
        context.lineCap = instruction[3];
        context.lineJoin = instruction[4];
        context.miterLimit = instruction[5];
        context.lineDashOffset = instruction[7];
        context.setLineDash(instruction[6]);
    }
    /**
   * @private
   * @param {string|Array<string>} text The text to draw.
   * @param {string} textKey The key of the text state.
   * @param {string} strokeKey The key for the stroke state.
   * @param {string} fillKey The key for the fill state.
   * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
   */ drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {
        const textState = this.textStates[textKey];
        const label = this.createLabel(text, textKey, fillKey, strokeKey);
        const strokeState = this.strokeStates[strokeKey];
        const pixelRatio = this.pixelRatio;
        const align = horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextAlign"]);
        const baseline = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$TextBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TEXT_ALIGN"][textState.textBaseline || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextBaseline"]];
        const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
        // Remove the 2 pixels we added in createLabel() for the anchor
        const width = label.width / pixelRatio - 2 * textState.scale[0];
        const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
        const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
        return {
            label: label,
            anchorX: anchorX,
            anchorY: anchorY
        };
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<*>} instructions Instructions array.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {FeatureCallback<T>} [featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [hitExtent] Only check
   *     features that intersect this extent.
   * @param {import("rbush").default<DeclutterEntry>} [declutterTree] Declutter tree.
   * @return {T|undefined} Callback result.
   * @template T
   */ execute_(context, scaledCanvasSize, transform, instructions, snapToPixel, featureCallback, hitExtent, declutterTree) {
        const zIndexContext = this.zIndexContext_;
        /** @type {Array<number>} */ let pixelCoordinates;
        if (this.pixelCoordinates_ && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(transform, this.renderedTransform_)) {
            pixelCoordinates = this.pixelCoordinates_;
        } else {
            if (!this.pixelCoordinates_) {
                this.pixelCoordinates_ = [];
            }
            pixelCoordinates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transform2D"])(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setFromArray"])(this.renderedTransform_, transform);
        }
        let i = 0; // instruction index
        const ii = instructions.length; // end of instructions
        let d = 0; // data index
        let dd; // end of per-instruction data
        let anchorX, anchorY, /** @type {import('../../style/Style.js').DeclutterMode} */ declutterMode, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;
        let pendingFill = 0;
        let pendingStroke = 0;
        const coordinateCache = this.coordinateCache_;
        const viewRotation = this.viewRotation_;
        const viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
        const state = {
            context: context,
            pixelRatio: this.pixelRatio,
            resolution: this.resolution,
            rotation: viewRotation
        };
        // When the batch size gets too big, performance decreases. 200 is a good
        // balance between batch size and number of fill/stroke instructions.
        const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
        let /** @type {import("../../Feature.js").FeatureLike} */ feature;
        let x, y, currentGeometry;
        while(i < ii){
            const instruction = instructions[i];
            const type = instruction[0];
            switch(type){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].BEGIN_GEOMETRY:
                    feature = instruction[1];
                    currentGeometry = instruction[3];
                    if (!feature.getGeometry()) {
                        i = instruction[2];
                    } else if (hitExtent !== undefined && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(hitExtent, currentGeometry.getExtent())) {
                        i = /** @type {number} */ instruction[2] + 1;
                    } else {
                        ++i;
                    }
                    if (zIndexContext) {
                        zIndexContext.zIndex = instruction[4];
                    }
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].BEGIN_PATH:
                    if (pendingFill > batchSize) {
                        this.fill_(context);
                        pendingFill = 0;
                    }
                    if (pendingStroke > batchSize) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    if (!pendingFill && !pendingStroke) {
                        context.beginPath();
                        prevX = NaN;
                        prevY = NaN;
                    }
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CIRCLE:
                    d = instruction[1];
                    const x1 = pixelCoordinates[d];
                    const y1 = pixelCoordinates[d + 1];
                    const x2 = pixelCoordinates[d + 2];
                    const y2 = pixelCoordinates[d + 3];
                    const dx = x2 - x1;
                    const dy = y2 - y1;
                    const r = Math.sqrt(dx * dx + dy * dy);
                    context.moveTo(x1 + r, y1);
                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CLOSE_PATH:
                    context.closePath();
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].CUSTOM:
                    d = instruction[1];
                    dd = instruction[2];
                    const geometry = instruction[3];
                    const renderer = instruction[4];
                    const fn = instruction[5];
                    state.geometry = geometry;
                    state.feature = feature;
                    if (!(i in coordinateCache)) {
                        coordinateCache[i] = [];
                    }
                    const coords = coordinateCache[i];
                    if (fn) {
                        fn(pixelCoordinates, d, dd, 2, coords);
                    } else {
                        coords[0] = pixelCoordinates[d];
                        coords[1] = pixelCoordinates[d + 1];
                        coords.length = 2;
                    }
                    if (zIndexContext) {
                        zIndexContext.zIndex = instruction[6];
                    }
                    renderer(coords, state);
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_IMAGE:
                    d = instruction[1];
                    dd = instruction[2];
                    image = instruction[3];
                    // Remaining arguments in DRAW_IMAGE are in alphabetical order
                    anchorX = instruction[4];
                    anchorY = instruction[5];
                    let height = instruction[6];
                    const opacity = instruction[7];
                    const originX = instruction[8];
                    const originY = instruction[9];
                    const rotateWithView = instruction[10];
                    let rotation = instruction[11];
                    const scale = instruction[12];
                    let width = instruction[13];
                    declutterMode = instruction[14] || 'declutter';
                    const declutterImageWithText = instruction[15];
                    if (!image && instruction.length >= 20) {
                        // create label images
                        text = instruction[19];
                        textKey = instruction[20];
                        strokeKey = instruction[21];
                        fillKey = instruction[22];
                        const labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);
                        image = labelWithAnchor.label;
                        instruction[3] = image;
                        const textOffsetX = instruction[23];
                        anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
                        instruction[4] = anchorX;
                        const textOffsetY = instruction[24];
                        anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
                        instruction[5] = anchorY;
                        height = image.height;
                        instruction[6] = height;
                        width = image.width;
                        instruction[13] = width;
                    }
                    let geometryWidths;
                    if (instruction.length > 25) {
                        geometryWidths = instruction[25];
                    }
                    let padding, backgroundFillInstruction, backgroundStrokeInstruction;
                    if (instruction.length > 17) {
                        padding = instruction[16];
                        backgroundFillInstruction = instruction[17];
                        backgroundStrokeInstruction = instruction[18];
                    } else {
                        padding = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"];
                        backgroundFillInstruction = null;
                        backgroundStrokeInstruction = null;
                    }
                    if (rotateWithView && viewRotationFromTransform) {
                        // Canvas is expected to be rotated to reverse view rotation.
                        rotation += viewRotation;
                    } else if (!rotateWithView && !viewRotationFromTransform) {
                        // Canvas is not rotated, images need to be rotated back to be north-up.
                        rotation -= viewRotation;
                    }
                    let widthIndex = 0;
                    for(; d < dd; d += 2){
                        if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) {
                            continue;
                        }
                        const dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, !!backgroundFillInstruction || !!backgroundStrokeInstruction, feature);
                        /** @type {ReplayImageOrLabelArgs} */ const args = [
                            context,
                            scaledCanvasSize,
                            image,
                            dimensions,
                            opacity,
                            backgroundFillInstruction,
                            backgroundStrokeInstruction
                        ];
                        if (declutterTree) {
                            let imageArgs, imageDeclutterMode, imageDeclutterBox;
                            if (declutterImageWithText) {
                                const index = dd - d;
                                if (!declutterImageWithText[index]) {
                                    // We now have the image for an image+text combination.
                                    declutterImageWithText[index] = {
                                        args,
                                        declutterMode
                                    };
                                    continue;
                                }
                                const imageDeclutter = declutterImageWithText[index];
                                imageArgs = imageDeclutter.args;
                                imageDeclutterMode = imageDeclutter.declutterMode;
                                delete declutterImageWithText[index];
                                imageDeclutterBox = getDeclutterBox(imageArgs);
                            }
                            // We now have image and text for an image+text combination.
                            let renderImage, renderText;
                            if (imageArgs && (imageDeclutterMode !== 'declutter' || !declutterTree.collides(imageDeclutterBox))) {
                                renderImage = true;
                            }
                            if (declutterMode !== 'declutter' || !declutterTree.collides(dimensions.declutterBox)) {
                                renderText = true;
                            }
                            if (imageDeclutterMode === 'declutter' && declutterMode === 'declutter') {
                                const render = renderImage && renderText;
                                renderImage = render;
                                renderText = render;
                            }
                            if (renderImage) {
                                if (imageDeclutterMode !== 'none') {
                                    declutterTree.insert(imageDeclutterBox);
                                }
                                this.replayImageOrLabel_.apply(this, imageArgs);
                            }
                            if (renderText) {
                                if (declutterMode !== 'none') {
                                    declutterTree.insert(dimensions.declutterBox);
                                }
                                this.replayImageOrLabel_.apply(this, args);
                            }
                        } else {
                            this.replayImageOrLabel_.apply(this, args);
                        }
                    }
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].DRAW_CHARS:
                    const begin = instruction[1];
                    const end = instruction[2];
                    const baseline = instruction[3];
                    const overflow = instruction[4];
                    fillKey = instruction[5];
                    const maxAngle = instruction[6];
                    const measurePixelRatio = instruction[7];
                    const offsetY = instruction[8];
                    strokeKey = instruction[9];
                    const strokeWidth = instruction[10];
                    text = instruction[11];
                    if (Array.isArray(text)) {
                        //FIXME Add support for rich text along lines
                        text = text.reduce(richTextToPlainText, '');
                    }
                    textKey = instruction[12];
                    const pixelRatioScale = [
                        instruction[13],
                        instruction[13]
                    ];
                    declutterMode = instruction[14] || 'declutter';
                    const textKeepUpright = instruction[15];
                    const textState = this.textStates[textKey];
                    const font = textState.font;
                    const textScale = [
                        textState.scale[0] * measurePixelRatio,
                        textState.scale[1] * measurePixelRatio
                    ];
                    let cachedWidths;
                    if (font in this.widths_) {
                        cachedWidths = this.widths_[font];
                    } else {
                        cachedWidths = {};
                        this.widths_[font] = cachedWidths;
                    }
                    const pathLength = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$length$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lineStringLength"])(pixelCoordinates, begin, end, 2);
                    const textLength = Math.abs(textScale[0]) * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["measureAndCacheTextWidth"])(font, text, cachedWidths);
                    if (overflow || textLength <= pathLength) {
                        const textAlign = this.textStates[textKey].textAlign;
                        const startM = (pathLength - textLength) * horizontalTextAlign(text, textAlign);
                        const parts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$textpath$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["drawTextOnPath"])(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["measureAndCacheTextWidth"], font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_, textKeepUpright);
                        drawChars: if (parts) {
                            /** @type {Array<ReplayImageOrLabelArgs>} */ const replayImageOrLabelArgs = [];
                            let c, cc, chars, label, part;
                            if (strokeKey) {
                                for(c = 0, cc = parts.length; c < cc; ++c){
                                    part = parts[c]; // x, y, anchorX, rotation, chunk
                                    chars = part[4];
                                    label = this.createLabel(chars, textKey, '', strokeKey);
                                    anchorX = /** @type {number} */ part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);
                                    anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;
                                    const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"], false, feature);
                                    if (declutterTree && declutterMode === 'declutter' && declutterTree.collides(dimensions.declutterBox)) {
                                        break drawChars;
                                    }
                                    replayImageOrLabelArgs.push([
                                        context,
                                        scaledCanvasSize,
                                        label,
                                        dimensions,
                                        1,
                                        null,
                                        null
                                    ]);
                                }
                            }
                            if (fillKey) {
                                for(c = 0, cc = parts.length; c < cc; ++c){
                                    part = parts[c]; // x, y, anchorX, rotation, chunk
                                    chars = part[4];
                                    label = this.createLabel(chars, textKey, fillKey, '');
                                    anchorX = part[2];
                                    anchorY = baseline * label.height - offsetY;
                                    const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultPadding"], false, feature);
                                    if (declutterTree && declutterMode === 'declutter' && declutterTree.collides(dimensions.declutterBox)) {
                                        break drawChars;
                                    }
                                    replayImageOrLabelArgs.push([
                                        context,
                                        scaledCanvasSize,
                                        label,
                                        dimensions,
                                        1,
                                        null,
                                        null
                                    ]);
                                }
                            }
                            if (declutterTree && declutterMode !== 'none') {
                                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));
                            }
                            for(let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i){
                                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);
                            }
                        }
                    }
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].END_GEOMETRY:
                    if (featureCallback !== undefined) {
                        feature = instruction[1];
                        const result = featureCallback(feature, currentGeometry, declutterMode);
                        if (result) {
                            return result;
                        }
                    }
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].FILL:
                    if (batchSize) {
                        pendingFill++;
                    } else {
                        this.fill_(context);
                    }
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].MOVE_TO_LINE_TO:
                    d = instruction[1];
                    dd = instruction[2];
                    x = pixelCoordinates[d];
                    y = pixelCoordinates[d + 1];
                    context.moveTo(x, y);
                    prevX = x + 0.5 | 0;
                    prevY = y + 0.5 | 0;
                    for(d += 2; d < dd; d += 2){
                        x = pixelCoordinates[d];
                        y = pixelCoordinates[d + 1];
                        roundX = x + 0.5 | 0;
                        roundY = y + 0.5 | 0;
                        if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                            context.lineTo(x, y);
                            prevX = roundX;
                            prevY = roundY;
                        }
                    }
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_FILL_STYLE:
                    this.alignAndScaleFill_ = instruction[2];
                    if (pendingFill) {
                        this.fill_(context);
                        pendingFill = 0;
                        if (pendingStroke) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                    }
                    /** @type {import("../../colorlike.js").ColorLike} */ context.fillStyle = instruction[1];
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].SET_STROKE_STYLE:
                    if (pendingStroke) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    this.setStrokeStyle_(context, instruction);
                    ++i;
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Instruction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].STROKE:
                    if (batchSize) {
                        pendingStroke++;
                    } else {
                        context.stroke();
                    }
                    ++i;
                    break;
                default:
                    ++i;
                    break;
            }
        }
        if (pendingFill) {
            this.fill_(context);
        }
        if (pendingStroke) {
            context.stroke();
        }
        return undefined;
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {import("rbush").default<DeclutterEntry>} [declutterTree] Declutter tree.
   */ execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree) {
        this.viewRotation_ = viewRotation;
        this.execute_(context, scaledCanvasSize, transform, this.instructions, snapToPixel, undefined, undefined, declutterTree);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {FeatureCallback<T>} [featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [hitExtent] Only check
   *     features that intersect this extent.
   * @return {T|undefined} Callback result.
   * @template T
   */ executeHitDetection(context, transform, viewRotation, featureCallback, hitExtent) {
        this.viewRotation_ = viewRotation;
        return this.execute_(context, [
            context.canvas.width,
            context.canvas.height
        ], transform, this.hitDetectionInstructions, true, featureCallback, hitExtent);
    }
}
const __TURBOPACK__default__export__ = Executor;
}),
"[project]/node_modules/ol/render/canvas/ExecutorGroup.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/ExecutorGroup
 */ __turbopack_context__.s([
    "ALL",
    ()=>ALL,
    "DECLUTTER",
    ()=>DECLUTTER,
    "NON_DECLUTTER",
    ()=>NON_DECLUTTER,
    "default",
    ()=>__TURBOPACK__default__export__,
    "getPixelIndexArray",
    ()=>getPixelIndexArray
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$obj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/obj.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Executor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Executor.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const ALL = [
    'Polygon',
    'Circle',
    'LineString',
    'Image',
    'Text',
    'Default'
];
const DECLUTTER = [
    'Image',
    'Text'
];
const NON_DECLUTTER = ALL.filter((builderType)=>!DECLUTTER.includes(builderType));
class ExecutorGroup {
    /**
   * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`
   * should be set here, unless the target context does not exceed that extent (which
   * can be the case when rendering to tiles).
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {boolean} overlaps The executor group can have overlapping geometries.
   * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions
   * The serializable instructions.
   * @param {number} [renderBuffer] Optional rendering buffer.
   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().
   */ constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, renderBuffer, deferredRendering){
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.maxExtent_ = maxExtent;
        /**
     * @private
     * @type {boolean}
     */ this.overlaps_ = overlaps;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {number}
     */ this.resolution_ = resolution;
        /**
     * @private
     * @type {number|undefined}
     */ this.renderBuffer_ = renderBuffer;
        /**
     * @private
     * @type {!Object<string, !Object<string, import("./Executor").default>>}
     */ this.executorsByZIndex_ = {};
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.hitDetectionContext_ = null;
        /**
     * @private
     * @type {import("../../transform.js").Transform}
     */ this.hitDetectionTransform_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.renderedContext_ = null;
        /**
     * @private
     * @type {Object<number, Array<import("./ZIndexContext.js").default>>}
     */ this.deferredZIndexContexts_ = {};
        this.createExecutors_(allInstructions, deferredRendering);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../transform.js").Transform} transform Transform.
   */ clip(context, transform) {
        const flatClipCoords = this.getClipCoords(transform);
        context.beginPath();
        context.moveTo(flatClipCoords[0], flatClipCoords[1]);
        context.lineTo(flatClipCoords[2], flatClipCoords[3]);
        context.lineTo(flatClipCoords[4], flatClipCoords[5]);
        context.lineTo(flatClipCoords[6], flatClipCoords[7]);
        context.clip();
    }
    /**
   * Create executors and populate them using the provided instructions.
   * @private
   * @param {!Object<string, !Object<string, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
   * @param {boolean} deferredRendering Enable deferred rendering.
   */ createExecutors_(allInstructions, deferredRendering) {
        for(const zIndex in allInstructions){
            let executors = this.executorsByZIndex_[zIndex];
            if (executors === undefined) {
                executors = {};
                this.executorsByZIndex_[zIndex] = executors;
            }
            const instructionByZindex = allInstructions[zIndex];
            for(const builderType in instructionByZindex){
                const instructions = instructionByZindex[builderType];
                executors[builderType] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Executor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](this.resolution_, this.pixelRatio_, this.overlaps_, instructions, deferredRendering);
            }
        }
    }
    /**
   * @param {Array<import("../canvas.js").BuilderType>} executors Executors.
   * @return {boolean} Has executors of the provided types.
   */ hasExecutors(executors) {
        for(const zIndex in this.executorsByZIndex_){
            const candidates = this.executorsByZIndex_[zIndex];
            for(let i = 0, ii = executors.length; i < ii; ++i){
                if (executors[i] in candidates) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
   * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
   * @return {T|undefined} Callback result.
   * @template T
   */ forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
        hitTolerance = Math.round(hitTolerance);
        const contextSize = hitTolerance * 2 + 1;
        const transform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
        const newContext = !this.hitDetectionContext_;
        if (newContext) {
            // Refrain from adding a 'willReadFrequently' hint in the options here.
            // While it will remove the "Canvas2D: Multiple readback operations using
            // getImageData are faster with the willReadFrequently attribute set
            // to true" warnings in the console, it makes hitDetection extremely
            // slow in Chrome when there are many features on the map
            this.hitDetectionContext_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])(contextSize, contextSize);
        }
        const context = this.hitDetectionContext_;
        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
            context.canvas.width = contextSize;
            context.canvas.height = contextSize;
        } else if (!newContext) {
            context.clearRect(0, 0, contextSize, contextSize);
        }
        /** @type {import("../../extent.js").Extent|undefined} */ let hitExtent;
        if (this.renderBuffer_ !== undefined) {
            hitExtent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createEmpty"])();
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["extendCoordinate"])(hitExtent, coordinate);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buffer"])(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
        }
        const indexes = getPixelIndexArray(hitTolerance);
        /** @type {import("../canvas.js").BuilderType} */ let builderType;
        /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.
     * @return {T|undefined} Callback result.
     */ function featureCallback(feature, geometry, declutterMode) {
            const imageData = context.getImageData(0, 0, contextSize, contextSize).data;
            for(let i = 0, ii = indexes.length; i < ii; i++){
                if (imageData[indexes[i]] > 0) {
                    if (!declutteredFeatures || declutterMode === 'none' || builderType !== 'Image' && builderType !== 'Text' || declutteredFeatures.includes(feature)) {
                        const idx = (indexes[i] - 3) / 4;
                        const x = hitTolerance - idx % contextSize;
                        const y = hitTolerance - (idx / contextSize | 0);
                        const result = callback(feature, geometry, x * x + y * y);
                        if (result) {
                            return result;
                        }
                    }
                    context.clearRect(0, 0, contextSize, contextSize);
                    break;
                }
            }
            return undefined;
        }
        /** @type {Array<number>} */ const zs = Object.keys(this.executorsByZIndex_).map(Number);
        zs.sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ascending"]);
        let i, j, executors, executor, result;
        for(i = zs.length - 1; i >= 0; --i){
            const zIndexKey = zs[i].toString();
            executors = this.executorsByZIndex_[zIndexKey];
            for(j = ALL.length - 1; j >= 0; --j){
                builderType = ALL[j];
                executor = executors[builderType];
                if (executor !== undefined) {
                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
                    if (result) {
                        return result;
                    }
                }
            }
        }
        return undefined;
    }
    /**
   * @param {import("../../transform.js").Transform} transform Transform.
   * @return {Array<number>|null} Clip coordinates.
   */ getClipCoords(transform) {
        const maxExtent = this.maxExtent_;
        if (!maxExtent) {
            return null;
        }
        const minX = maxExtent[0];
        const minY = maxExtent[1];
        const maxX = maxExtent[2];
        const maxY = maxExtent[3];
        const flatClipCoords = [
            minX,
            minY,
            minX,
            maxY,
            maxX,
            maxY,
            maxX,
            minY
        ];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transform2D"])(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
        return flatClipCoords;
    }
    /**
   * @return {boolean} Is empty.
   */ isEmpty() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$obj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmpty"])(this.executorsByZIndex_);
    }
    /**
   * @param {CanvasRenderingContext2D} targetContext Context.
   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
   * @param {Array<import("../canvas.js").BuilderType>} [builderTypes] Ordered replay types to replay.
   *     Default is {@link module:ol/render/replay~ALL}
   * @param {import("rbush").default<import('./Executor.js').DeclutterEntry>|null} [declutterTree] Declutter tree.
   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.
   */ execute(targetContext, scaledCanvasSize, transform, viewRotation, snapToPixel, builderTypes, declutterTree) {
        const zs = Object.keys(this.executorsByZIndex_).map(Number);
        zs.sort(declutterTree ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["descending"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ascending"]);
        builderTypes = builderTypes ? builderTypes : ALL;
        const maxBuilderTypes = ALL.length;
        for(let i = 0, ii = zs.length; i < ii; ++i){
            const zIndexKey = zs[i].toString();
            const replays = this.executorsByZIndex_[zIndexKey];
            for(let j = 0, jj = builderTypes.length; j < jj; ++j){
                const builderType = builderTypes[j];
                const replay = replays[builderType];
                if (replay !== undefined) {
                    const zIndexContext = declutterTree === null ? undefined : replay.getZIndexContext();
                    const context = zIndexContext ? zIndexContext.getContext() : targetContext;
                    const requireClip = this.maxExtent_ && builderType !== 'Image' && builderType !== 'Text';
                    if (requireClip) {
                        context.save();
                        // setup clipping so that the parts of over-simplified geometries are not
                        // visible outside the current extent when panning
                        this.clip(context, transform);
                    }
                    if (!zIndexContext || builderType === 'Text' || builderType === 'Image') {
                        replay.execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree);
                    } else {
                        zIndexContext.pushFunction((context)=>replay.execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree));
                    }
                    if (requireClip) {
                        context.restore();
                    }
                    if (zIndexContext) {
                        zIndexContext.offset();
                        const index = zs[i] * maxBuilderTypes + ALL.indexOf(builderType);
                        if (!this.deferredZIndexContexts_[index]) {
                            this.deferredZIndexContexts_[index] = [];
                        }
                        this.deferredZIndexContexts_[index].push(zIndexContext);
                    }
                }
            }
        }
        this.renderedContext_ = targetContext;
    }
    getDeferredZIndexContexts() {
        return this.deferredZIndexContexts_;
    }
    getRenderedContext() {
        return this.renderedContext_;
    }
    renderDeferred() {
        const deferredZIndexContexts = this.deferredZIndexContexts_;
        const zs = Object.keys(deferredZIndexContexts).map(Number).sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ascending"]);
        for(let i = 0, ii = zs.length; i < ii; ++i){
            deferredZIndexContexts[zs[i]].forEach((zIndexContext)=>{
                zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip
                zIndexContext.clear();
            });
            deferredZIndexContexts[zs[i]].length = 0;
        }
    }
}
/**
 * This cache is used to store arrays of indexes for calculated pixel circles
 * to increase performance.
 * It is a static property to allow each Replaygroup to access it.
 * @type {Object<number, Array<number>>}
 */ const circlePixelIndexArrayCache = {};
function getPixelIndexArray(radius) {
    if (circlePixelIndexArrayCache[radius] !== undefined) {
        return circlePixelIndexArrayCache[radius];
    }
    const size = radius * 2 + 1;
    const maxDistanceSq = radius * radius;
    const distances = new Array(maxDistanceSq + 1);
    for(let i = 0; i <= radius; ++i){
        for(let j = 0; j <= radius; ++j){
            const distanceSq = i * i + j * j;
            if (distanceSq > maxDistanceSq) {
                break;
            }
            let distance = distances[distanceSq];
            if (!distance) {
                distance = [];
                distances[distanceSq] = distance;
            }
            distance.push(((radius + i) * size + (radius + j)) * 4 + 3);
            if (i > 0) {
                distance.push(((radius - i) * size + (radius + j)) * 4 + 3);
            }
            if (j > 0) {
                distance.push(((radius + i) * size + (radius - j)) * 4 + 3);
                if (i > 0) {
                    distance.push(((radius - i) * size + (radius - j)) * 4 + 3);
                }
            }
        }
    }
    const pixelIndex = [];
    for(let i = 0, ii = distances.length; i < ii; ++i){
        if (distances[i]) {
            pixelIndex.push(...distances[i]);
        }
    }
    circlePixelIndexArrayCache[radius] = pixelIndex;
    return pixelIndex;
}
const __TURBOPACK__default__export__ = ExecutorGroup;
}),
"[project]/node_modules/ol/render/canvas/Immediate.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/Immediate
 */ // FIXME test, especially polygons with holes and multipolygons
// FIXME need to handle large thick features (where pixel size matters)
// FIXME add offset and end to ol/geom/flat/transform~transform2D?
__turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/colorlike.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$SimpleGeometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/SimpleGeometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/geom/flat/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$VectorContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/VectorContext.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
/**
 * @classdesc
 * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements
 * direct rendering of features and geometries to an HTML5 Canvas context.
 * Instances of this class are created internally by the library and
 * provided to application code as vectorContext member of the
 * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
 * render events emitted by layers and maps.
 */ class CanvasImmediateRenderer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$VectorContext$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.
   * @param {import("../../proj.js").TransformFunction} [userTransform] Transform from user to view projection.
   */ constructor(context, pixelRatio, extent, transform, viewRotation, squaredTolerance, userTransform){
        super();
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.context_ = context;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.extent_ = extent;
        /**
     * @private
     * @type {import("../../transform.js").Transform}
     */ this.transform_ = transform;
        /**
     * @private
     * @type {number}
     */ this.transformRotation_ = transform ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toFixed"])(Math.atan2(transform[1], transform[0]), 10) : 0;
        /**
     * @private
     * @type {number}
     */ this.viewRotation_ = viewRotation;
        /**
     * @private
     * @type {number}
     */ this.squaredTolerance_ = squaredTolerance;
        /**
     * @private
     * @type {import("../../proj.js").TransformFunction}
     */ this.userTransform_ = userTransform;
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.contextFillState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.contextStrokeState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").TextState}
     */ this.contextTextState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.fillState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.strokeState_ = null;
        /**
     * @private
     * @type {import('../../DataTile.js').ImageLike}
     */ this.image_ = null;
        /**
     * @private
     * @type {number}
     */ this.imageAnchorX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageAnchorY_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageHeight_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageOpacity_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageOriginX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageOriginY_ = 0;
        /**
     * @private
     * @type {boolean}
     */ this.imageRotateWithView_ = false;
        /**
     * @private
     * @type {number}
     */ this.imageRotation_ = 0;
        /**
     * @private
     * @type {import("../../size.js").Size}
     */ this.imageScale_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {number}
     */ this.imageWidth_ = 0;
        /**
     * @private
     * @type {string}
     */ this.text_ = '';
        /**
     * @private
     * @type {number}
     */ this.textOffsetX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.textOffsetY_ = 0;
        /**
     * @private
     * @type {boolean}
     */ this.textRotateWithView_ = false;
        /**
     * @private
     * @type {number}
     */ this.textRotation_ = 0;
        /**
     * @private
     * @type {import("../../size.js").Size}
     */ this.textScale_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.textFillState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.textStrokeState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").TextState}
     */ this.textState_ = null;
        /**
     * @private
     * @type {Array<number>}
     */ this.pixelCoordinates_ = [];
        /**
     * @private
     * @type {import("../../transform.js").Transform}
     */ this.tmpLocalTransform_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["create"])();
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   */ drawImages_(flatCoordinates, offset, end, stride) {
        if (!this.image_) {
            return;
        }
        const pixelCoordinates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transform2D"])(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        const context = this.context_;
        const localTransform = this.tmpLocalTransform_;
        const alpha = context.globalAlpha;
        if (this.imageOpacity_ != 1) {
            context.globalAlpha = alpha * this.imageOpacity_;
        }
        let rotation = this.imageRotation_;
        if (this.transformRotation_ === 0) {
            rotation -= this.viewRotation_;
        }
        if (this.imageRotateWithView_) {
            rotation += this.viewRotation_;
        }
        for(let i = 0, ii = pixelCoordinates.length; i < ii; i += 2){
            const x = pixelCoordinates[i] - this.imageAnchorX_;
            const y = pixelCoordinates[i + 1] - this.imageAnchorY_;
            if (rotation !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {
                const centerX = x + this.imageAnchorX_;
                const centerY = y + this.imageAnchorY_;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compose"])(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                context.save();
                context.transform.apply(context, localTransform);
                context.translate(centerX, centerY);
                context.scale(this.imageScale_[0], this.imageScale_[1]);
                context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);
                context.restore();
            } else {
                context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
            }
        }
        if (this.imageOpacity_ != 1) {
            context.globalAlpha = alpha;
        }
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   */ drawText_(flatCoordinates, offset, end, stride) {
        if (!this.textState_ || this.text_ === '') {
            return;
        }
        if (this.textFillState_) {
            this.setContextFillState_(this.textFillState_);
        }
        if (this.textStrokeState_) {
            this.setContextStrokeState_(this.textStrokeState_);
        }
        this.setContextTextState_(this.textState_);
        const pixelCoordinates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transform2D"])(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        const context = this.context_;
        let rotation = this.textRotation_;
        if (this.transformRotation_ === 0) {
            rotation -= this.viewRotation_;
        }
        if (this.textRotateWithView_) {
            rotation += this.viewRotation_;
        }
        for(; offset < end; offset += stride){
            const x = pixelCoordinates[offset] + this.textOffsetX_;
            const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
            if (rotation !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1) {
                context.save();
                context.translate(x - this.textOffsetX_, y - this.textOffsetY_);
                context.rotate(rotation);
                context.translate(this.textOffsetX_, this.textOffsetY_);
                context.scale(this.textScale_[0], this.textScale_[1]);
                if (this.textStrokeState_) {
                    context.strokeText(this.text_, 0, 0);
                }
                if (this.textFillState_) {
                    context.fillText(this.text_, 0, 0);
                }
                context.restore();
            } else {
                if (this.textStrokeState_) {
                    context.strokeText(this.text_, x, y);
                }
                if (this.textFillState_) {
                    context.fillText(this.text_, x, y);
                }
            }
        }
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {boolean} close Close.
   * @private
   * @return {number} end End.
   */ moveToLineTo_(flatCoordinates, offset, end, stride, close) {
        const context = this.context_;
        const pixelCoordinates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$flat$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transform2D"])(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
        let length = pixelCoordinates.length;
        if (close) {
            length -= 2;
        }
        for(let i = 2; i < length; i += 2){
            context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
        }
        if (close) {
            context.closePath();
        }
        return end;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @private
   * @return {number} End.
   */ drawRings_(flatCoordinates, offset, ends, stride) {
        for(let i = 0, ii = ends.length; i < ii; ++i){
            offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
        }
        return offset;
    }
    /**
   * Render a circle geometry into the canvas.  Rendering is immediate and uses
   * the current fill and stroke styles.
   *
   * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
   * @api
   * @override
   */ drawCircle(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(this.extent_, geometry.getExtent())) {
            return;
        }
        if (this.fillState_ || this.strokeState_) {
            if (this.fillState_) {
                this.setContextFillState_(this.fillState_);
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
            }
            const pixelCoordinates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$geom$2f$SimpleGeometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transformGeom2D"])(geometry, this.transform_, this.pixelCoordinates_);
            const dx = pixelCoordinates[2] - pixelCoordinates[0];
            const dy = pixelCoordinates[3] - pixelCoordinates[1];
            const radius = Math.sqrt(dx * dx + dy * dy);
            const context = this.context_;
            context.beginPath();
            context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
            if (this.fillState_) {
                context.fill();
            }
            if (this.strokeState_) {
                context.stroke();
            }
        }
        if (this.text_ !== '') {
            this.drawText_(geometry.getCenter(), 0, 2, 2);
        }
    }
    /**
   * Set the rendering style.  Note that since this is an immediate rendering API,
   * any `zIndex` on the provided style will be ignored.
   *
   * @param {import("../../style/Style.js").default} style The rendering style.
   * @api
   * @override
   */ setStyle(style) {
        this.setFillStrokeStyle(style.getFill(), style.getStroke());
        this.setImageStyle(style.getImage());
        this.setTextStyle(style.getText());
    }
    /**
   * @param {import("../../transform.js").Transform} transform Transform.
   */ setTransform(transform) {
        this.transform_ = transform;
    }
    /**
   * Render a geometry into the canvas.  Call
   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.
   *
   * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
   * @api
   * @override
   */ drawGeometry(geometry) {
        const type = geometry.getType();
        switch(type){
            case 'Point':
                this.drawPoint(geometry);
                break;
            case 'LineString':
                this.drawLineString(geometry);
                break;
            case 'Polygon':
                this.drawPolygon(geometry);
                break;
            case 'MultiPoint':
                this.drawMultiPoint(geometry);
                break;
            case 'MultiLineString':
                this.drawMultiLineString(geometry);
                break;
            case 'MultiPolygon':
                this.drawMultiPolygon(geometry);
                break;
            case 'GeometryCollection':
                this.drawGeometryCollection(geometry);
                break;
            case 'Circle':
                this.drawCircle(geometry);
                break;
            default:
        }
    }
    /**
   * Render a feature into the canvas.  Note that any `zIndex` on the provided
   * style will be ignored - features are rendered immediately in the order that
   * this method is called.  If you need `zIndex` support, you should be using an
   * {@link module:ol/layer/Vector~VectorLayer} instead.
   *
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {import("../../style/Style.js").default} style Style.
   * @api
   * @override
   */ drawFeature(feature, style) {
        const geometry = style.getGeometryFunction()(feature);
        if (!geometry) {
            return;
        }
        this.setStyle(style);
        this.drawGeometry(geometry);
    }
    /**
   * Render a GeometryCollection to the canvas.  Rendering is immediate and
   * uses the current styles appropriate for each geometry in the collection.
   *
   * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
   * @override
   */ drawGeometryCollection(geometry) {
        const geometries = geometry.getGeometriesArray();
        for(let i = 0, ii = geometries.length; i < ii; ++i){
            this.drawGeometry(geometries[i]);
        }
    }
    /**
   * Render a Point geometry into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
   * @override
   */ drawPoint(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        const flatCoordinates = geometry.getFlatCoordinates();
        const stride = geometry.getStride();
        if (this.image_) {
            this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
        }
        if (this.text_ !== '') {
            this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
        }
    }
    /**
   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
   * uses the current style.
   *
   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
   * @override
   */ drawMultiPoint(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        const flatCoordinates = geometry.getFlatCoordinates();
        const stride = geometry.getStride();
        if (this.image_) {
            this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
        }
        if (this.text_ !== '') {
            this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
        }
    }
    /**
   * Render a LineString into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
   * @override
   */ drawLineString(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(this.extent_, geometry.getExtent())) {
            return;
        }
        if (this.strokeState_) {
            this.setContextStrokeState_(this.strokeState_);
            const context = this.context_;
            const flatCoordinates = geometry.getFlatCoordinates();
            context.beginPath();
            this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
            context.stroke();
        }
        if (this.text_ !== '') {
            const flatMidpoint = geometry.getFlatMidpoint();
            this.drawText_(flatMidpoint, 0, 2, 2);
        }
    }
    /**
   * Render a MultiLineString geometry into the canvas.  Rendering is immediate
   * and uses the current style.
   *
   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
   * @override
   */ drawMultiLineString(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        const geometryExtent = geometry.getExtent();
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(this.extent_, geometryExtent)) {
            return;
        }
        if (this.strokeState_) {
            this.setContextStrokeState_(this.strokeState_);
            const context = this.context_;
            const flatCoordinates = geometry.getFlatCoordinates();
            let offset = 0;
            const ends = geometry.getEnds();
            const stride = geometry.getStride();
            context.beginPath();
            for(let i = 0, ii = ends.length; i < ii; ++i){
                offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
            }
            context.stroke();
        }
        if (this.text_ !== '') {
            const flatMidpoints = geometry.getFlatMidpoints();
            this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
        }
    }
    /**
   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
   * @override
   */ drawPolygon(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(this.extent_, geometry.getExtent())) {
            return;
        }
        if (this.strokeState_ || this.fillState_) {
            if (this.fillState_) {
                this.setContextFillState_(this.fillState_);
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
            }
            const context = this.context_;
            context.beginPath();
            this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, geometry.getEnds(), geometry.getStride());
            if (this.fillState_) {
                context.fill();
            }
            if (this.strokeState_) {
                context.stroke();
            }
        }
        if (this.text_ !== '') {
            const flatInteriorPoint = geometry.getFlatInteriorPoint();
            this.drawText_(flatInteriorPoint, 0, 2, 2);
        }
    }
    /**
   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
   * uses the current style.
   * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
   * @override
   */ drawMultiPolygon(geometry) {
        if (this.squaredTolerance_) {
            geometry = geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(this.extent_, geometry.getExtent())) {
            return;
        }
        if (this.strokeState_ || this.fillState_) {
            if (this.fillState_) {
                this.setContextFillState_(this.fillState_);
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
            }
            const context = this.context_;
            const flatCoordinates = geometry.getOrientedFlatCoordinates();
            let offset = 0;
            const endss = geometry.getEndss();
            const stride = geometry.getStride();
            context.beginPath();
            for(let i = 0, ii = endss.length; i < ii; ++i){
                const ends = endss[i];
                offset = this.drawRings_(flatCoordinates, offset, ends, stride);
            }
            if (this.fillState_) {
                context.fill();
            }
            if (this.strokeState_) {
                context.stroke();
            }
        }
        if (this.text_ !== '') {
            const flatInteriorPoints = geometry.getFlatInteriorPoints();
            this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
        }
    }
    /**
   * @param {import("../canvas.js").FillState} fillState Fill state.
   * @private
   */ setContextFillState_(fillState) {
        const context = this.context_;
        const contextFillState = this.contextFillState_;
        if (!contextFillState) {
            context.fillStyle = fillState.fillStyle;
            this.contextFillState_ = {
                fillStyle: fillState.fillStyle
            };
        } else {
            if (contextFillState.fillStyle != fillState.fillStyle) {
                contextFillState.fillStyle = fillState.fillStyle;
                context.fillStyle = fillState.fillStyle;
            }
        }
    }
    /**
   * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
   * @private
   */ setContextStrokeState_(strokeState) {
        const context = this.context_;
        const contextStrokeState = this.contextStrokeState_;
        if (!contextStrokeState) {
            context.lineCap = strokeState.lineCap;
            context.setLineDash(strokeState.lineDash);
            context.lineDashOffset = strokeState.lineDashOffset;
            context.lineJoin = strokeState.lineJoin;
            context.lineWidth = strokeState.lineWidth;
            context.miterLimit = strokeState.miterLimit;
            context.strokeStyle = strokeState.strokeStyle;
            this.contextStrokeState_ = {
                lineCap: strokeState.lineCap,
                lineDash: strokeState.lineDash,
                lineDashOffset: strokeState.lineDashOffset,
                lineJoin: strokeState.lineJoin,
                lineWidth: strokeState.lineWidth,
                miterLimit: strokeState.miterLimit,
                strokeStyle: strokeState.strokeStyle
            };
        } else {
            if (contextStrokeState.lineCap != strokeState.lineCap) {
                contextStrokeState.lineCap = strokeState.lineCap;
                context.lineCap = strokeState.lineCap;
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(contextStrokeState.lineDash, strokeState.lineDash)) {
                context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
            }
            if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
                contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
                context.lineDashOffset = strokeState.lineDashOffset;
            }
            if (contextStrokeState.lineJoin != strokeState.lineJoin) {
                contextStrokeState.lineJoin = strokeState.lineJoin;
                context.lineJoin = strokeState.lineJoin;
            }
            if (contextStrokeState.lineWidth != strokeState.lineWidth) {
                contextStrokeState.lineWidth = strokeState.lineWidth;
                context.lineWidth = strokeState.lineWidth;
            }
            if (contextStrokeState.miterLimit != strokeState.miterLimit) {
                contextStrokeState.miterLimit = strokeState.miterLimit;
                context.miterLimit = strokeState.miterLimit;
            }
            if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
                contextStrokeState.strokeStyle = strokeState.strokeStyle;
                context.strokeStyle = strokeState.strokeStyle;
            }
        }
    }
    /**
   * @param {import("../canvas.js").TextState} textState Text state.
   * @private
   */ setContextTextState_(textState) {
        const context = this.context_;
        const contextTextState = this.contextTextState_;
        const textAlign = textState.textAlign ? textState.textAlign : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextAlign"];
        if (!contextTextState) {
            context.font = textState.font;
            context.textAlign = textAlign;
            context.textBaseline = textState.textBaseline;
            this.contextTextState_ = {
                font: textState.font,
                textAlign: textAlign,
                textBaseline: textState.textBaseline
            };
        } else {
            if (contextTextState.font != textState.font) {
                contextTextState.font = textState.font;
                context.font = textState.font;
            }
            if (contextTextState.textAlign != textAlign) {
                contextTextState.textAlign = textAlign;
                context.textAlign = textAlign;
            }
            if (contextTextState.textBaseline != textState.textBaseline) {
                contextTextState.textBaseline = textState.textBaseline;
                context.textBaseline = textState.textBaseline;
            }
        }
    }
    /**
   * Set the fill and stroke style for subsequent draw operations.  To clear
   * either fill or stroke styles, pass null for the appropriate parameter.
   *
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   * @override
   */ setFillStrokeStyle(fillStyle, strokeStyle) {
        if (!fillStyle) {
            this.fillState_ = null;
        } else {
            const fillStyleColor = fillStyle.getColor();
            this.fillState_ = {
                fillStyle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(fillStyleColor ? fillStyleColor : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"])
            };
        }
        if (!strokeStyle) {
            this.strokeState_ = null;
        } else {
            const strokeStyleColor = strokeStyle.getColor();
            const strokeStyleLineCap = strokeStyle.getLineCap();
            const strokeStyleLineDash = strokeStyle.getLineDash();
            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
            const strokeStyleLineJoin = strokeStyle.getLineJoin();
            const strokeStyleWidth = strokeStyle.getWidth();
            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
            const lineDash = strokeStyleLineDash ? strokeStyleLineDash : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"];
            this.strokeState_ = {
                lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineCap"],
                lineDash: this.pixelRatio_ === 1 ? lineDash : lineDash.map((n)=>n * this.pixelRatio_),
                lineDashOffset: (strokeStyleLineDashOffset ? strokeStyleLineDashOffset : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"]) * this.pixelRatio_,
                lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineJoin"],
                lineWidth: (strokeStyleWidth !== undefined ? strokeStyleWidth : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineWidth"]) * this.pixelRatio_,
                miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultMiterLimit"],
                strokeStyle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(strokeStyleColor ? strokeStyleColor : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultStrokeStyle"])
            };
        }
    }
    /**
   * Set the image style for subsequent draw operations.  Pass null to remove
   * the image style.
   *
   * @param {import("../../style/Image.js").default} imageStyle Image style.
   * @override
   */ setImageStyle(imageStyle) {
        let imageSize;
        if (!imageStyle || !(imageSize = imageStyle.getSize())) {
            this.image_ = null;
            return;
        }
        const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);
        const imageAnchor = imageStyle.getAnchor();
        const imageOrigin = imageStyle.getOrigin();
        this.image_ = imageStyle.getImage(this.pixelRatio_);
        this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;
        this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;
        this.imageHeight_ = imageSize[1] * imagePixelRatio;
        this.imageOpacity_ = imageStyle.getOpacity();
        this.imageOriginX_ = imageOrigin[0];
        this.imageOriginY_ = imageOrigin[1];
        this.imageRotateWithView_ = imageStyle.getRotateWithView();
        this.imageRotation_ = imageStyle.getRotation();
        const imageScale = imageStyle.getScaleArray();
        this.imageScale_ = [
            imageScale[0] * this.pixelRatio_ / imagePixelRatio,
            imageScale[1] * this.pixelRatio_ / imagePixelRatio
        ];
        this.imageWidth_ = imageSize[0] * imagePixelRatio;
    }
    /**
   * Set the text style for subsequent draw operations.  Pass null to
   * remove the text style.
   *
   * @param {import("../../style/Text.js").default} textStyle Text style.
   * @override
   */ setTextStyle(textStyle) {
        if (!textStyle) {
            this.text_ = '';
        } else {
            const textFillStyle = textStyle.getFill();
            if (!textFillStyle) {
                this.textFillState_ = null;
            } else {
                const textFillStyleColor = textFillStyle.getColor();
                this.textFillState_ = {
                    fillStyle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(textFillStyleColor ? textFillStyleColor : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFillStyle"])
                };
            }
            const textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) {
                this.textStrokeState_ = null;
            } else {
                const textStrokeStyleColor = textStrokeStyle.getColor();
                const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
                const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
                const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
                const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
                const textStrokeStyleWidth = textStrokeStyle.getWidth();
                const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
                this.textStrokeState_ = {
                    lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineCap"],
                    lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDash"],
                    lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineDashOffset"],
                    lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineJoin"],
                    lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultLineWidth"],
                    miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultMiterLimit"],
                    strokeStyle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$colorlike$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asColorLike"])(textStrokeStyleColor ? textStrokeStyleColor : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultStrokeStyle"])
                };
            }
            const textFont = textStyle.getFont();
            const textOffsetX = textStyle.getOffsetX();
            const textOffsetY = textStyle.getOffsetY();
            const textRotateWithView = textStyle.getRotateWithView();
            const textRotation = textStyle.getRotation();
            const textScale = textStyle.getScaleArray();
            const textText = textStyle.getText();
            const textTextAlign = textStyle.getTextAlign();
            const textTextBaseline = textStyle.getTextBaseline();
            this.textState_ = {
                font: textFont !== undefined ? textFont : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultFont"],
                textAlign: textTextAlign !== undefined ? textTextAlign : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextAlign"],
                textBaseline: textTextBaseline !== undefined ? textTextBaseline : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultTextBaseline"]
            };
            this.text_ = textText !== undefined ? Array.isArray(textText) ? textText.reduce((acc, t, i)=>acc += i % 2 ? ' ' : t, '') : textText : '';
            this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
            this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
            this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
            this.textRotation_ = textRotation !== undefined ? textRotation : 0;
            this.textScale_ = [
                this.pixelRatio_ * textScale[0],
                this.pixelRatio_ * textScale[1]
            ];
        }
    }
}
const __TURBOPACK__default__export__ = CanvasImmediateRenderer;
}),
"[project]/node_modules/ol/render/canvas/hitdetect.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * @module ol/render/canvas/hitdetect
 */ __turbopack_context__.s([
    "HIT_DETECT_RESOLUTION",
    ()=>HIT_DETECT_RESOLUTION,
    "createHitDetectionImageData",
    ()=>createHitDetectionImageData,
    "hitDetect",
    ()=>hitDetect
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/extent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/math.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/proj.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Icon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Icon$3e$__ = __turbopack_context__.i("[project]/node_modules/ol/style/Icon.js [app-ssr] (ecmascript) <export default as Icon>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Immediate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ol/render/canvas/Immediate.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const HIT_DETECT_RESOLUTION = 0.5;
function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation, squaredTolerance, projection) {
    const userExtent = projection ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toUserExtent"])(extent, projection) : extent;
    const width = size[0] * HIT_DETECT_RESOLUTION;
    const height = size[1] * HIT_DETECT_RESOLUTION;
    const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])(width, height);
    context.imageSmoothingEnabled = false;
    const canvas = context.canvas;
    const renderer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$render$2f$canvas$2f$Immediate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](context, HIT_DETECT_RESOLUTION, extent, null, rotation, squaredTolerance, projection ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getTransformFromProjections"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$proj$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getUserProjection"])(), projection) : null);
    const featureCount = features.length;
    // Stretch hit detection index to use the whole available color range
    const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
    const featuresByZIndex = {};
    for(let i = 1; i <= featureCount; ++i){
        const feature = features[i - 1];
        const featureStyleFunction = feature.getStyleFunction() || styleFunction;
        if (!featureStyleFunction) {
            continue;
        }
        let styles = featureStyleFunction(feature, resolution);
        if (!styles) {
            continue;
        }
        if (!Array.isArray(styles)) {
            styles = [
                styles
            ];
        }
        const index = i * indexFactor;
        const color = index.toString(16).padStart(7, '#00000');
        for(let j = 0, jj = styles.length; j < jj; ++j){
            const originalStyle = styles[j];
            const geometry = originalStyle.getGeometryFunction()(feature);
            if (!geometry || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$extent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersects"])(userExtent, geometry.getExtent())) {
                continue;
            }
            const style = originalStyle.clone();
            const fill = style.getFill();
            if (fill) {
                fill.setColor(color);
            }
            const stroke = style.getStroke();
            if (stroke) {
                stroke.setColor(color);
                stroke.setLineDash(null);
            }
            style.setText(undefined);
            const image = originalStyle.getImage();
            if (image) {
                const imgSize = image.getImageSize();
                if (!imgSize) {
                    continue;
                }
                const imgContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCanvasContext2D"])(imgSize[0], imgSize[1], undefined, {
                    alpha: false
                });
                const img = imgContext.canvas;
                imgContext.fillStyle = color;
                imgContext.fillRect(0, 0, img.width, img.height);
                style.setImage(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$style$2f$Icon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Icon$3e$__["Icon"]({
                    img: img,
                    anchor: image.getAnchor(),
                    anchorXUnits: 'pixels',
                    anchorYUnits: 'pixels',
                    offset: image.getOrigin(),
                    opacity: 1,
                    size: image.getSize(),
                    scale: image.getScale(),
                    rotation: image.getRotation(),
                    rotateWithView: image.getRotateWithView()
                }));
            }
            const zIndex = style.getZIndex() || 0;
            let byGeometryType = featuresByZIndex[zIndex];
            if (!byGeometryType) {
                byGeometryType = {};
                featuresByZIndex[zIndex] = byGeometryType;
                byGeometryType['Polygon'] = [];
                byGeometryType['Circle'] = [];
                byGeometryType['LineString'] = [];
                byGeometryType['Point'] = [];
            }
            const type = geometry.getType();
            if (type === 'GeometryCollection') {
                const geometries = /** @type {import("../../geom/GeometryCollection.js").default} */ geometry.getGeometriesArrayRecursive();
                for(let i = 0, ii = geometries.length; i < ii; ++i){
                    const geometry = geometries[i];
                    byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);
                }
            } else {
                byGeometryType[type.replace('Multi', '')].push(geometry, style);
            }
        }
    }
    const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ascending"]);
    for(let i = 0, ii = zIndexKeys.length; i < ii; ++i){
        const byGeometryType = featuresByZIndex[zIndexKeys[i]];
        for(const type in byGeometryType){
            const geomAndStyle = byGeometryType[type];
            for(let j = 0, jj = geomAndStyle.length; j < jj; j += 2){
                renderer.setStyle(geomAndStyle[j + 1]);
                for(let k = 0, kk = transforms.length; k < kk; ++k){
                    renderer.setTransform(transforms[k]);
                    renderer.drawGeometry(geomAndStyle[j]);
                }
            }
        }
    }
    return context.getImageData(0, 0, canvas.width, canvas.height);
}
function hitDetect(pixel, features, imageData) {
    /** @type {Array<F>} */ const resultFeatures = [];
    if (imageData) {
        const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);
        const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);
        // The pixel coordinate is clamped down to the hit-detect canvas' size to account
        // for browsers returning coordinates slightly larger than the actual canvas size
        // due to a non-integer pixel ratio.
        const index = ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(x, 0, imageData.width - 1) + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ol$2f$math$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(y, 0, imageData.height - 1) * imageData.width) * 4;
        const r = imageData.data[index];
        const g = imageData.data[index + 1];
        const b = imageData.data[index + 2];
        const i = b + 256 * (g + 256 * r);
        const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
        if (i && i % indexFactor === 0) {
            resultFeatures.push(features[i / indexFactor - 1]);
        }
    }
    return resultFeatures;
}
}),
];

//# sourceMappingURL=node_modules_ol_render_f3d864b5._.js.map